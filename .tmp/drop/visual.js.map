{"version":3,"file":"visual.js","mappings":"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;IACpD,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;IACxC,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;IACtC,kBAAkB,GAAG,IAAI,kBAAkB,EAAE,CAAC;IAC9C,0BAA0B,GAAG,IAAI,0BAA0B,EAAE,CAAC;IAC9D,uBAAuB,GAAG,IAAI,uBAAuB,EAAE,CAAC;IACxD,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC;IACtD,gBAAgB,GAAG,IAAI,gBAAgB,EAAE,CAAC;IAC1C,kBAAkB,GAAG,IAAI,kBAAkB,EAAE,CAAC;IAE9C,KAAK,GAAG;QACJ,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,cAAc;QACnB,IAAI,CAAC,kBAAkB;QACvB,IAAI,CAAC,0BAA0B;QAC/B,IAAI,CAAC,uBAAuB;QAC5B,IAAI,CAAC,sBAAsB;QAC3B,IAAI,CAAC,gBAAgB;QACrB,IAAI,CAAC,kBAAkB;KAC1B,CAAC;CACL;;;;;;;;;;;;ACnVD;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrC2E;AACpE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kFAAa;AACjD;AACA,4DAA4D,+EAAU;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,+EAAU;AAC3D;AACA,iCAAiC,gBAAgB;AACjD,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,wGAAwG;AAC7J;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,oGAAoG;AACrJ;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,kDAAkD;AAC9E;AACA,yEAAyE,gBAAgB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB,GAAG,uBAAuB;AAC3F;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kFAAa;AACzC;AACA,oDAAoD,+EAAU;AAC9D,6BAA6B,gBAAgB;AAC7C,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,yBAAyB,EAAC;AACzC;;;;;;;;;;;;;AChMqE;AACD;AACX;AACzD;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AAC4E;AAC5E;AACA;AACO;AACP;AACO;AACP;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,wBAAwB,kFAAsC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB,qFAAyC;AAC9D;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,oFAAoF;AAChL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,uBAAuB;AACnH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,qKAAqK;AACjQ;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,4EAA4E;AACxK;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,+BAA+B;AAC3H;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,yDAAyD;AACrJ;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","sources":["webpack:///./src/settings.ts","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/utils/FormattingSettingsUtils.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsService.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/index.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsComponents.js","webpack:///./src/visual.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./.tmp/precompile/visualPlugin.ts"],"sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport { formattingSettings } from \"powerbi-visuals-utils-formattingmodel\";\r\nimport powerbi from \"powerbi-visuals-api\";\r\n\r\nimport FormattingSettingsCard = formattingSettings.SimpleCard;\r\nimport FormattingSettingsSlice = formattingSettings.Slice;\r\nimport FormattingSettingsModel = formattingSettings.Model;\r\n\r\n/**\r\n * General Settings Card\r\n */\r\nclass GeneralSettings extends FormattingSettingsCard {\r\n    fontSize = new formattingSettings.NumUpDown({\r\n        name: \"fontSize\",\r\n        displayName: \"Font Size\",\r\n        value: 10\r\n    });\r\n\r\n    fontFamily = new formattingSettings.TextInput({\r\n        name: \"fontFamily\",\r\n        displayName: \"Font Family\",\r\n        value: \"Segoe UI, sans-serif\",\r\n        placeholder: \"Enter font family\"\r\n    });\r\n\r\n    showMeasureName = new formattingSettings.ToggleSwitch({\r\n        name: \"showMeasureName\",\r\n        displayName: \"Show Measure Name\",\r\n        value: true\r\n    });\r\n    \r\n    columnWidth = new formattingSettings.NumUpDown({\r\n        name: \"columnWidth\",\r\n        displayName: \"Column Width\",\r\n        value: 100\r\n    });\r\n    \r\n    enableHover = new formattingSettings.ToggleSwitch({\r\n        name: \"enableHover\",\r\n        displayName: \"Enable Hover Effects\",\r\n        value: true\r\n    });\r\n\r\n    rowHeaderWidth = new formattingSettings.NumUpDown({\r\n        name: \"rowHeaderWidth\",\r\n        displayName: \"Row Header Width\",\r\n        value: 200 // Default width\r\n    });\r\n\r\n    name: string = \"general\";\r\n    displayName: string = \"General\";\r\n    slices: Array<FormattingSettingsSlice> = [\r\n        this.fontFamily,\r\n        this.fontSize, \r\n        this.showMeasureName, \r\n        this.columnWidth, \r\n        this.rowHeaderWidth,\r\n        this.enableHover\r\n    ];\r\n}\r\n\r\n/**\r\n * Border Settings Card\r\n */\r\nclass BorderSettings extends FormattingSettingsCard {\r\n    show = new formattingSettings.ToggleSwitch({\r\n        name: \"show\",\r\n        displayName: \"Show Borders\",\r\n        value: true\r\n    });\r\n\r\n    color = new formattingSettings.ColorPicker({\r\n        name: \"color\",\r\n        displayName: \"Border Color\",\r\n        value: { value: \"#FFFFF\" },\r\n        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\r\n    });\r\n\r\n    width = new formattingSettings.NumUpDown({\r\n        name: \"width\",\r\n        displayName: \"Border Width\",\r\n        value: 1\r\n    });\r\n\r\n    horizontalBorders = new formattingSettings.ToggleSwitch({\r\n        name: \"horizontalBorders\",\r\n        displayName: \"Horizontal Borders\",\r\n        value: true\r\n    });\r\n\r\n    verticalBorders = new formattingSettings.ToggleSwitch({\r\n        name: \"verticalBorders\",\r\n        displayName: \"Vertical Borders\",\r\n        value: true\r\n    });\r\n\r\n    name: string = \"borderSettings\";\r\n    displayName: string = \"Borders\";\r\n    slices: Array<FormattingSettingsSlice> = [\r\n        this.show, \r\n        this.color, \r\n        this.width, \r\n        this.horizontalBorders, \r\n        this.verticalBorders\r\n    ];\r\n}\r\n\r\n/**\r\n * Shared formatting options base class\r\n */\r\nclass BaseFormatSettings extends FormattingSettingsCard {\r\n    color = new formattingSettings.ColorPicker({\r\n        name: \"color\",\r\n        displayName: \"Font Color\",\r\n        value: { value: \"#000000\" },\r\n        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\r\n    });\r\n\r\n    fontSize = new formattingSettings.NumUpDown({\r\n        name: \"fontSize\",\r\n        displayName: \"Font Size\",\r\n        value: 10\r\n    });\r\n\r\n    bold = new formattingSettings.ToggleSwitch({\r\n        name: \"bold\",\r\n        displayName: \"Bold\",\r\n        value: false\r\n    });\r\n\r\n    italic = new formattingSettings.ToggleSwitch({\r\n        name: \"italic\",\r\n        displayName: \"Italic\",\r\n        value: false\r\n    });\r\n\r\n    underline = new formattingSettings.ToggleSwitch({\r\n        name: \"underline\",\r\n        displayName: \"Underline\",\r\n        value: false\r\n    });\r\n    \r\n    backgroundColor = new formattingSettings.ColorPicker({\r\n        name: \"backgroundColor\",\r\n        displayName: \"Background Color\",\r\n        value: { value: \"#FFFFFF\" },\r\n        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\r\n    });\r\n\r\n    alignment = new formattingSettings.ItemDropdown({\r\n        name: \"alignment\",\r\n        displayName: \"Text Alignment\",\r\n        items: [\r\n            { displayName: \"Left\", value: \"left\" },\r\n            { displayName: \"Center\", value: \"center\" },\r\n            { displayName: \"Right\", value: \"right\" }\r\n        ],\r\n        value: { value: \"right\", displayName: \"Right\" }\r\n    });\r\n\r\n    get formattingSlices(): Array<FormattingSettingsSlice> {\r\n        return [\r\n            this.color, \r\n            this.fontSize,\r\n            this.bold, \r\n            this.italic, \r\n            this.underline,\r\n            this.backgroundColor, \r\n            this.alignment\r\n        ];\r\n    }\r\n}\r\n\r\n/**\r\n * Values Formatting Card\r\n */\r\nclass FontFormatSettings extends BaseFormatSettings {\r\n    name: string = \"fontFormat\";\r\n    displayName: string = \"Data Values\";\r\n    slices: Array<FormattingSettingsSlice> = this.formattingSlices;\r\n\r\n    constructor() {\r\n        super();\r\n        // Default values for data values\r\n        this.alignment.value = { value: \"right\", displayName: \"Right\" };\r\n        this.backgroundColor.value = { value: \"#FFFFFF\" };\r\n    }\r\n}\r\n\r\n/**\r\n * Column Header Formatting Card\r\n */\r\nclass ColumnHeaderFormatSettings extends BaseFormatSettings {\r\n    name: string = \"columnHeaderFormat\";\r\n    displayName: string = \"Column Headers\";\r\n    slices: Array<FormattingSettingsSlice> = this.formattingSlices;\r\n\r\n    constructor() {\r\n        super();\r\n        // Default values for column headers\r\n        this.alignment.value = { value: \"center\", displayName: \"Center\" };\r\n        this.backgroundColor.value = { value: \"#E0E0E0\" };\r\n        this.bold.value = true;\r\n    }\r\n}\r\n\r\n/**\r\n * Row Header Formatting Card\r\n */\r\nclass RowHeaderFormatSettings extends BaseFormatSettings {\r\n    name: string = \"rowHeaderFormat\";\r\n    displayName: string = \"Row Headers\";\r\n    slices: Array<FormattingSettingsSlice> = this.formattingSlices;\r\n\r\n    constructor() {\r\n        super();\r\n        // Default values for row headers\r\n        this.alignment.value = { value: \"left\", displayName: \"Left\" };\r\n        this.backgroundColor.value = { value: \"#E8E8E8\" };\r\n        this.bold.value = true;\r\n    }\r\n}\r\n\r\n/**\r\n * Subtotal Formatting Card\r\n */\r\nclass SubtotalFormatSettings extends BaseFormatSettings {\r\n    name: string = \"subtotalFormat\";\r\n    displayName: string = \"Subtotals\";\r\n    slices: Array<FormattingSettingsSlice> = this.formattingSlices;\r\n\r\n    constructor() {\r\n        super();\r\n        // Default values for subtotals\r\n        this.alignment.value = { value: \"right\", displayName: \"Right\" };\r\n        this.backgroundColor.value = { value: \"#F0F0F0\" };\r\n        this.bold.value = true;\r\n    }\r\n}\r\n\r\n/**\r\n * Blank Rows Settings Card\r\n */\r\nclass BlankRowSettings extends FormattingSettingsCard {\r\n    enableBlankRows = new formattingSettings.ToggleSwitch({\r\n        name: \"enableBlankRows\",\r\n        displayName: \"Add Blank Rows\",\r\n        value: false\r\n    });\r\n\r\n    backgroundColor = new formattingSettings.ColorPicker({\r\n        name: \"backgroundColor\",\r\n        displayName: \"Background Color\",\r\n        value: { value: \"#F0F0F0\" },\r\n        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\r\n    });\r\n\r\n    height = new formattingSettings.NumUpDown({\r\n        name: \"height\",\r\n        displayName: \"Row Height\",\r\n        value: 10\r\n    });\r\n\r\n    name: string = \"blankRowSettings\";\r\n    displayName: string = \"Blank Rows\";\r\n    slices: Array<FormattingSettingsSlice> = [\r\n        this.enableBlankRows,\r\n        this.backgroundColor,\r\n        this.height\r\n    ];\r\n}\r\n\r\n/**\r\n * Grand Total Settings Card\r\n */\r\nclass GrandTotalSettings extends BaseFormatSettings {\r\n    show = new formattingSettings.ToggleSwitch({\r\n        name: \"show\",\r\n        displayName: \"Show Grand Total\",\r\n        value: true\r\n    });\r\n\r\n    label = new formattingSettings.TextInput({\r\n        name: \"label\",\r\n        displayName: \"Total Label\",\r\n        value: \"Grand Total\",\r\n        placeholder: \"Enter label for total\"\r\n    });\r\n\r\n    name: string = \"grandTotalSettings\";\r\n    displayName: string = \"Grand Total\";\r\n    slices: Array<FormattingSettingsSlice> = [\r\n        this.show,\r\n        this.label,\r\n        ...this.formattingSlices // Get the common formatting options\r\n    ];\r\n\r\n    constructor() {\r\n        super();\r\n        // Default values for grand total\r\n        this.alignment.value = { value: \"right\", displayName: \"Right\" };\r\n        this.backgroundColor.value = { value: \"#EEEEEE\" };\r\n        this.bold.value = true;\r\n    }\r\n}\r\n\r\n/**\r\n * Visual settings model class\r\n */\r\nexport class VisualFormattingSettingsModel extends FormattingSettingsModel {\r\n    // Create formatting settings model formatting cards\r\n    generalSettings = new GeneralSettings();\r\n    borderSettings = new BorderSettings();\r\n    fontFormatSettings = new FontFormatSettings();\r\n    columnHeaderFormatSettings = new ColumnHeaderFormatSettings();\r\n    rowHeaderFormatSettings = new RowHeaderFormatSettings();\r\n    subtotalFormatSettings = new SubtotalFormatSettings();\r\n    blankRowSettings = new BlankRowSettings();\r\n    grandTotalSettings = new GrandTotalSettings();\r\n\r\n    cards = [\r\n        this.generalSettings,\r\n        this.borderSettings,\r\n        this.fontFormatSettings,\r\n        this.columnHeaderFormatSettings,\r\n        this.rowHeaderFormatSettings,\r\n        this.subtotalFormatSettings,\r\n        this.blankRowSettings,\r\n        this.grandTotalSettings\r\n    ];\r\n}","/**\n * Build and return formatting descriptor for simple slice\n *\n * @param objectName Object name from capabilities\n * @param slice formatting simple slice\n * @returns simple slice formatting descriptor\n */\nexport function getDescriptor(objectName, slice) {\n    return {\n        objectName: objectName,\n        propertyName: slice.name,\n        selector: slice.selector,\n        altConstantValueSelector: slice.altConstantSelector,\n        instanceKind: slice.instanceKind\n    };\n}\n/**\n * Get property value from dataview objects if exists\n * Else return the default value from formatting settings object\n *\n * @param value dataview object value\n * @param defaultValue formatting settings default value\n * @returns formatting property value\n */\nexport function getPropertyValue(slice, value, defaultValue) {\n    if (value == null || (typeof value === \"object\" && !value.solid)) {\n        return defaultValue;\n    }\n    if (value.solid) {\n        return { value: value === null || value === void 0 ? void 0 : value.solid.color };\n    }\n    if ((slice === null || slice === void 0 ? void 0 : slice.type) === \"Dropdown\" /* visuals.FormattingComponent.Dropdown */ && slice.items) {\n        const itemsArray = slice.items;\n        return itemsArray.find(item => item.value == value);\n    }\n    return value;\n}\n//# sourceMappingURL=FormattingSettingsUtils.js.map","import { CompositeCard, SimpleCard } from \"./FormattingSettingsComponents\";\nexport class FormattingSettingsService {\n    constructor(localizationManager) {\n        this.localizationManager = localizationManager;\n    }\n    /**\n     * Build visual formatting settings model from metadata dataView\n     *\n     * @param dataViews metadata dataView object\n     * @returns visual formatting settings model\n     */\n    populateFormattingSettingsModel(typeClass, dataView) {\n        var _a, _b;\n        const defaultSettings = new typeClass();\n        const dataViewObjects = (_a = dataView === null || dataView === void 0 ? void 0 : dataView.metadata) === null || _a === void 0 ? void 0 : _a.objects;\n        if (dataViewObjects) {\n            // loop over each formatting property and set its new value if exists\n            (_b = defaultSettings.cards) === null || _b === void 0 ? void 0 : _b.forEach((card) => {\n                var _a;\n                if (card instanceof CompositeCard)\n                    (_a = card.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                const cardGroupInstances = (card instanceof SimpleCard ? [card] : card.groups);\n                cardGroupInstances.forEach((cardGroupInstance) => {\n                    var _a, _b, _c, _d;\n                    // Set current top level toggle value\n                    (_a = cardGroupInstance.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                    (_b = cardGroupInstance === null || cardGroupInstance === void 0 ? void 0 : cardGroupInstance.slices) === null || _b === void 0 ? void 0 : _b.forEach((slice) => {\n                        slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                    });\n                    (_d = (_c = cardGroupInstance === null || cardGroupInstance === void 0 ? void 0 : cardGroupInstance.container) === null || _c === void 0 ? void 0 : _c.containerItems) === null || _d === void 0 ? void 0 : _d.forEach((containerItem) => {\n                        var _a;\n                        (_a = containerItem === null || containerItem === void 0 ? void 0 : containerItem.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                            slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                        });\n                    });\n                });\n            });\n        }\n        return defaultSettings;\n    }\n    /**\n     * Build formatting model by parsing formatting settings model object\n     *\n     * @returns powerbi visual formatting model\n     */\n    buildFormattingModel(formattingSettingsModel) {\n        const formattingModel = {\n            cards: []\n        };\n        formattingSettingsModel.cards\n            .filter(({ visible = true }) => visible)\n            .forEach((card) => {\n            var _a;\n            const formattingCard = {\n                displayName: (this.localizationManager && card.displayNameKey) ? this.localizationManager.getDisplayName(card.displayNameKey) : card.displayName,\n                description: (this.localizationManager && card.descriptionKey) ? this.localizationManager.getDisplayName(card.descriptionKey) : card.description,\n                groups: [],\n                uid: card.name + \"-card\",\n                analyticsPane: card.analyticsPane,\n            };\n            const objectName = card.name;\n            if (card.topLevelSlice) {\n                const topLevelToggleSlice = card.topLevelSlice.getFormattingSlice(objectName, this.localizationManager);\n                topLevelToggleSlice.suppressDisplayName = true;\n                formattingCard.topLevelToggle = topLevelToggleSlice;\n            }\n            (_a = card.onPreProcess) === null || _a === void 0 ? void 0 : _a.call(card);\n            const isSimpleCard = card instanceof SimpleCard;\n            const cardGroupInstances = (isSimpleCard ?\n                [card].filter(({ visible = true }) => visible) :\n                card.groups.filter(({ visible = true }) => visible));\n            cardGroupInstances\n                .forEach((cardGroupInstance) => {\n                const groupUid = cardGroupInstance.name + \"-group\";\n                // Build formatting group for each group\n                const formattingGroup = {\n                    displayName: isSimpleCard ? undefined : (this.localizationManager && cardGroupInstance.displayNameKey)\n                        ? this.localizationManager.getDisplayName(cardGroupInstance.displayNameKey) : cardGroupInstance.displayName,\n                    description: isSimpleCard ? undefined : (this.localizationManager && cardGroupInstance.descriptionKey)\n                        ? this.localizationManager.getDisplayName(cardGroupInstance.descriptionKey) : cardGroupInstance.description,\n                    slices: [],\n                    uid: groupUid,\n                    collapsible: cardGroupInstance.collapsible,\n                    delaySaveSlices: cardGroupInstance.delaySaveSlices,\n                    disabled: cardGroupInstance.disabled,\n                    disabledReason: cardGroupInstance.disabledReason,\n                };\n                formattingCard.groups.push(formattingGroup);\n                // In case formatting model adds data points or top categories (Like when you modify specific visual category color).\n                // these categories use same object name and property name from capabilities and the generated uid will be the same for these formatting categories properties\n                // Solution => Save slice names to modify each slice uid to be unique by adding counter value to the new slice uid\n                const sliceNames = {};\n                // Build formatting container slice for each property\n                if (cardGroupInstance.container) {\n                    const container = cardGroupInstance.container;\n                    const containerUid = groupUid + \"-container\";\n                    const formattingContainer = {\n                        displayName: (this.localizationManager && container.displayNameKey)\n                            ? this.localizationManager.getDisplayName(container.displayNameKey) : container.displayName,\n                        description: (this.localizationManager && container.descriptionKey)\n                            ? this.localizationManager.getDisplayName(container.descriptionKey) : container.description,\n                        containerItems: [],\n                        uid: containerUid\n                    };\n                    container.containerItems.forEach((containerItem) => {\n                        // Build formatting container item object\n                        const containerIemName = containerItem.displayNameKey ? containerItem.displayNameKey : containerItem.displayName;\n                        const containerItemUid = containerUid + containerIemName;\n                        const formattingContainerItem = {\n                            displayName: (this.localizationManager && containerItem.displayNameKey)\n                                ? this.localizationManager.getDisplayName(containerItem.displayNameKey) : containerItem.displayName,\n                            slices: [],\n                            uid: containerItemUid\n                        };\n                        // Build formatting slices and add them to current formatting container item\n                        this.buildFormattingSlices({ slices: containerItem.slices, objectName, sliceNames, formattingSlices: formattingContainerItem.slices });\n                        formattingContainer.containerItems.push(formattingContainerItem);\n                    });\n                    formattingGroup.container = formattingContainer;\n                }\n                if (cardGroupInstance.slices) {\n                    if (cardGroupInstance.topLevelSlice) {\n                        const topLevelToggleSlice = cardGroupInstance.topLevelSlice.getFormattingSlice(objectName, this.localizationManager);\n                        topLevelToggleSlice.suppressDisplayName = true;\n                        (formattingGroup.displayName == undefined ? formattingCard : formattingGroup).topLevelToggle = topLevelToggleSlice;\n                    }\n                    // Build formatting slice for each property\n                    this.buildFormattingSlices({ slices: cardGroupInstance.slices, objectName, sliceNames, formattingSlices: formattingGroup.slices });\n                }\n            });\n            formattingCard.revertToDefaultDescriptors = this.getRevertToDefaultDescriptor(card);\n            formattingModel.cards.push(formattingCard);\n        });\n        return formattingModel;\n    }\n    buildFormattingSlices({ slices, objectName, sliceNames, formattingSlices }) {\n        // Filter slices based on their visibility\n        slices === null || slices === void 0 ? void 0 : slices.filter(({ visible = true }) => visible).forEach((slice) => {\n            const formattingSlice = slice === null || slice === void 0 ? void 0 : slice.getFormattingSlice(objectName, this.localizationManager);\n            if (formattingSlice) {\n                // Modify formatting slice uid if needed\n                if (sliceNames[slice.name] === undefined) {\n                    sliceNames[slice.name] = 0;\n                }\n                else {\n                    sliceNames[slice.name]++;\n                    formattingSlice.uid = `${formattingSlice.uid}-${sliceNames[slice.name]}`;\n                }\n                formattingSlices.push(formattingSlice);\n            }\n        });\n    }\n    getRevertToDefaultDescriptor(card) {\n        var _a;\n        // Proceeded slice names are saved to prevent duplicated default descriptors in case of using \n        // formatting categories & selectors, since they have the same descriptor objectName and propertyName\n        const sliceNames = {};\n        const revertToDefaultDescriptors = [];\n        let cardSlicesDefaultDescriptors;\n        let cardContainerSlicesDefaultDescriptors = [];\n        // eslint-disable-next-line\n        if (card instanceof CompositeCard && card.topLevelSlice)\n            revertToDefaultDescriptors.push(...(_a = card.topLevelSlice) === null || _a === void 0 ? void 0 : _a.getRevertToDefaultDescriptor(card.name));\n        const cardGroupInstances = (card instanceof SimpleCard ?\n            [card].filter(({ visible = true }) => visible) :\n            card.groups.filter(({ visible = true }) => visible));\n        cardGroupInstances.forEach((cardGroupInstance) => {\n            var _a, _b;\n            cardSlicesDefaultDescriptors = this.getSlicesRevertToDefaultDescriptor(card.name, cardGroupInstance.slices, sliceNames, cardGroupInstance.topLevelSlice);\n            (_b = (_a = cardGroupInstance.container) === null || _a === void 0 ? void 0 : _a.containerItems) === null || _b === void 0 ? void 0 : _b.forEach((containerItem) => {\n                cardContainerSlicesDefaultDescriptors = cardContainerSlicesDefaultDescriptors.concat(this.getSlicesRevertToDefaultDescriptor(card.name, containerItem.slices, sliceNames));\n            });\n            revertToDefaultDescriptors.push(...cardSlicesDefaultDescriptors.concat(cardContainerSlicesDefaultDescriptors));\n        });\n        return revertToDefaultDescriptors;\n    }\n    getSlicesRevertToDefaultDescriptor(cardName, slices, sliceNames, topLevelSlice) {\n        let revertToDefaultDescriptors = [];\n        if (topLevelSlice) {\n            sliceNames[topLevelSlice.name] = true;\n            revertToDefaultDescriptors = revertToDefaultDescriptors.concat(topLevelSlice.getRevertToDefaultDescriptor(cardName));\n        }\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            if (slice && !sliceNames[slice.name]) {\n                sliceNames[slice.name] = true;\n                revertToDefaultDescriptors = revertToDefaultDescriptors.concat(slice.getRevertToDefaultDescriptor(cardName));\n            }\n        });\n        return revertToDefaultDescriptors;\n    }\n}\nexport default FormattingSettingsService;\n//# sourceMappingURL=FormattingSettingsService.js.map","import * as formattingSettings from \"./FormattingSettingsComponents\";\nimport FormattingSettingsService from \"./FormattingSettingsService\";\nexport { formattingSettings, FormattingSettingsService };\n//# sourceMappingURL=index.js.map","/**\n * Powerbi utils components classes for custom visual formatting pane objects\n *\n */\nimport * as FormattingSettingsParser from \"./utils/FormattingSettingsUtils\";\nclass NamedEntity {\n}\nexport class CardGroupEntity extends NamedEntity {\n}\nexport class Model {\n}\n/** CompositeCard is use to populate a card into the formatting pane with multiple groups */\nexport class CompositeCard extends NamedEntity {\n}\nexport class Group extends CardGroupEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n}\n/** SimpleCard is use to populate a card into the formatting pane in a single group */\nexport class SimpleCard extends CardGroupEntity {\n}\nexport class SimpleSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const sliceDisplayName = (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName;\n        const sliceDescription = (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description;\n        const componentDisplayName = {\n            displayName: sliceDisplayName,\n            description: sliceDescription,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName, localizationManager)\n            } });\n    }\n    // eslint-disable-next-line\n    getFormattingComponent(objectName, localizationManager) {\n        return {\n            descriptor: FormattingSettingsParser.getDescriptor(objectName, this),\n            value: this.value,\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return [{\n                objectName: objectName,\n                propertyName: this.name\n            }];\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a;\n        const newValue = (_a = dataViewObjects === null || dataViewObjects === void 0 ? void 0 : dataViewObjects[objectName]) === null || _a === void 0 ? void 0 : _a[this.name];\n        this.value = FormattingSettingsParser.getPropertyValue(this, newValue, this.value);\n    }\n}\nexport class AlignmentGroup extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"AlignmentGroup\" /* visuals.FormattingComponent.AlignmentGroup */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mode: this.mode, supportsNoSelection: this.supportsNoSelection });\n    }\n}\nexport class ToggleSwitch extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ToggleSwitch\" /* visuals.FormattingComponent.ToggleSwitch */;\n    }\n}\nexport class ColorPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ColorPicker\" /* visuals.FormattingComponent.ColorPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { defaultColor: this.defaultColor, isNoFillItemSupported: this.isNoFillItemSupported });\n    }\n}\nexport class NumUpDown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"NumUpDown\" /* visuals.FormattingComponent.NumUpDown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { options: this.options });\n    }\n}\nexport class Slider extends NumUpDown {\n    constructor() {\n        super(...arguments);\n        this.type = \"Slider\" /* visuals.FormattingComponent.Slider */;\n    }\n}\nexport class DatePicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DatePicker\" /* visuals.FormattingComponent.DatePicker */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: (localizationManager && this.placeholderKey) ? localizationManager.getDisplayName(this.placeholderKey) : this.placeholder, validators: this.validators });\n    }\n}\nexport class ItemDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mergeValues: this.mergeValues, filterValues: this.filterValues });\n    }\n}\nexport class DurationPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DurationPicker\" /* visuals.FormattingComponent.DurationPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class ErrorRangeControl extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ErrorRangeControl\" /* visuals.FormattingComponent.ErrorRangeControl */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class FieldPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FieldPicker\" /* visuals.FormattingComponent.FieldPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators, allowMultipleValues: this.allowMultipleValues });\n    }\n}\nexport class ItemFlagsSelection extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoFlagsSelection extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n}\nexport class TextInput extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"TextInput\" /* visuals.FormattingComponent.TextInput */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: this.placeholder });\n    }\n}\nexport class TextArea extends TextInput {\n    constructor() {\n        super(...arguments);\n        this.type = \"TextArea\" /* visuals.FormattingComponent.TextArea */;\n    }\n}\nexport class FontPicker extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FontPicker\" /* visuals.FormattingComponent.FontPicker */;\n    }\n}\nexport class GradientBar extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"GradientBar\" /* visuals.FormattingComponent.GradientBar */;\n    }\n}\nexport class ImageUpload extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ImageUpload\" /* visuals.FormattingComponent.ImageUpload */;\n    }\n}\nexport class ListEditor extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ListEditor\" /* visuals.FormattingComponent.ListEditor */;\n    }\n}\nexport class ReadOnlyText extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ReadOnlyText\" /* visuals.FormattingComponent.ReadOnlyText */;\n    }\n}\nexport class ShapeMapSelector extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ShapeMapSelector\" /* visuals.FormattingComponent.ShapeMapSelector */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { isAzMapReferenceSelector: this.isAzMapReferenceSelector });\n    }\n}\nexport class CompositeSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const componentDisplayName = {\n            displayName: (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName,\n            description: (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName)\n            } });\n    }\n}\nexport class FontControl extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FontControl\" /* visuals.FormattingComponent.FontControl */;\n    }\n    getFormattingComponent(objectName) {\n        var _a, _b, _c;\n        return {\n            fontFamily: this.fontFamily.getFormattingComponent(objectName),\n            fontSize: this.fontSize.getFormattingComponent(objectName),\n            bold: (_a = this.bold) === null || _a === void 0 ? void 0 : _a.getFormattingComponent(objectName),\n            italic: (_b = this.italic) === null || _b === void 0 ? void 0 : _b.getFormattingComponent(objectName),\n            underline: (_c = this.underline) === null || _c === void 0 ? void 0 : _c.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.fontFamily.getRevertToDefaultDescriptor(objectName)\n            .concat(this.fontSize.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bold ? this.bold.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.italic ? this.italic.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.underline ? this.underline.getRevertToDefaultDescriptor(objectName) : []);\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a, _b, _c;\n        this.fontFamily.setPropertiesValues(dataViewObjects, objectName);\n        this.fontSize.setPropertiesValues(dataViewObjects, objectName);\n        (_a = this.bold) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, objectName);\n        (_b = this.italic) === null || _b === void 0 ? void 0 : _b.setPropertiesValues(dataViewObjects, objectName);\n        (_c = this.underline) === null || _c === void 0 ? void 0 : _c.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class MarginPadding extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"MarginPadding\" /* visuals.FormattingComponent.MarginPadding */;\n    }\n    getFormattingComponent(objectName) {\n        return {\n            left: this.left.getFormattingComponent(objectName),\n            right: this.right.getFormattingComponent(objectName),\n            top: this.top.getFormattingComponent(objectName),\n            bottom: this.bottom.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.left.getRevertToDefaultDescriptor(objectName)\n            .concat(this.right.getRevertToDefaultDescriptor(objectName))\n            .concat(this.top.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bottom.getRevertToDefaultDescriptor(objectName));\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        this.left.setPropertiesValues(dataViewObjects, objectName);\n        this.right.setPropertiesValues(dataViewObjects, objectName);\n        this.top.setPropertiesValues(dataViewObjects, objectName);\n        this.bottom.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class Container extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n}\nexport class ContainerItem extends NamedEntity {\n}\n//# sourceMappingURL=FormattingSettingsComponents.js.map","/*\r\n *  Power BI Visual CLI\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n */\r\n\"use strict\";\r\n\r\nimport powerbi from \"powerbi-visuals-api\";\r\nimport { FormattingSettingsService } from \"powerbi-visuals-utils-formattingmodel\";\r\nimport \"./../style/visual.less\";\r\n\r\nimport VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;\r\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\r\nimport IVisual = powerbi.extensibility.visual.IVisual;\r\nimport DataView = powerbi.DataView;\r\n\r\nimport { VisualFormattingSettingsModel } from \"./settings\";\r\n\r\n// Interfaces for matrix data\r\ninterface MatrixNode {\r\n    value?: any; // Make value optional to match DataViewMatrixNode\r\n    children?: MatrixNode[];\r\n    values?: any | { [id: number]: any }; // Support both array and indexed object format\r\n    isDate?: boolean;\r\n}\r\n// CSS class constants\r\nconst CSS_CLASSES = {\r\n    VISUAL_CONTAINER: \"visual-container\",\r\n    TABLE_CONTAINER: \"table-container\",\r\n    MATRIX_TABLE: \"matrix-table\",\r\n    HOVER_ENABLED: \"hover-enabled\",\r\n    ROW_HEADER: \"row-header\",\r\n    COLUMN_HEADER: \"column-header\",\r\n    DATA_CELL: \"data-cell\",\r\n    SUBTOTAL_CELL: \"subtotal-cell\",\r\n    LEVEL_0_ROW: \"level-0-row\",\r\n    LEVEL_0_HEADER: \"level-0-header\",\r\n    LEVEL_0_SUBTOTAL: \"level-0-subtotal\",\r\n    BLANK_ROW: \"blank-row\",\r\n    WITH_BORDERS: \"with-borders\",\r\n    WITH_HORIZONTAL_BORDERS: \"with-horizontal-borders\",\r\n    WITH_VERTICAL_BORDERS: \"with-vertical-borders\",\r\n    SUBTOTAL_ROW: \"subtotal-row\",\r\n    GRAND_TOTAL_ROW: \"grand-total-row\",\r\n}\r\n\r\nexport class Visual implements IVisual {\r\n    // DOM elements\r\n    private target: HTMLElement;\r\n    private tableDiv: HTMLDivElement;\r\n    \r\n    // State tracking\r\n    private formattingSettings: VisualFormattingSettingsModel;\r\n    private formattingSettingsService: FormattingSettingsService;\r\n    private host: powerbi.extensibility.visual.IVisualHost;\r\n    private expandedRows: Map<string, boolean>;\r\n    private lastOptions: VisualUpdateOptions;\r\n\r\n    constructor(options: VisualConstructorOptions) {\r\n        this.target = options.element;\r\n        this.host = options.host;\r\n        this.formattingSettingsService = new FormattingSettingsService();\r\n        this.expandedRows = new Map<string, boolean>();\r\n    \r\n        // Create container elements\r\n        this.createContainerElements();\r\n    }\r\n\r\n    private createContainerElements(): void {\r\n        // Create main container div\r\n        const container = document.createElement(\"div\");\r\n        container.className = CSS_CLASSES.VISUAL_CONTAINER;\r\n        container.style.overflow = \"hidden\";\r\n        this.target.appendChild(container);\r\n        \r\n        // Create table container\r\n        this.tableDiv = document.createElement(\"div\");\r\n        this.tableDiv.className = CSS_CLASSES.TABLE_CONTAINER;\r\n        this.tableDiv.style.overflow = \"auto\";\r\n        this.tableDiv.style.position = \"relative\";\r\n        container.appendChild(this.tableDiv);\r\n    }\r\n\r\n    public update(options: VisualUpdateOptions): void {\r\n        // Store options for later re-renders\r\n        this.lastOptions = options;\r\n        \r\n        // Clear previous content\r\n        this.tableDiv.innerHTML = \"\";\r\n        \r\n        // Get formatting settings\r\n        if (!options?.dataViews?.[0]) {\r\n            return; // No data to display\r\n        }\r\n        \r\n        this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(\r\n            VisualFormattingSettingsModel,\r\n            options.dataViews[0]\r\n        );\r\n        \r\n        try {\r\n            const dataView = options.dataViews[0];\r\n            \r\n            // Check if we have matrix data\r\n            if (!dataView.matrix) {\r\n                return;\r\n            }\r\n            \r\n            const matrix = dataView.matrix;\r\n            const measureName = this.getMeasureName(dataView);\r\n            \r\n            // Create matrix table\r\n            this.createMatrixTable(matrix, measureName);\r\n            \r\n        } catch (error) {\r\n            console.error(\"Error in update:\", error);\r\n        }\r\n    }\r\n    \r\n    // Helper methods for data extraction\r\n    private getMeasureName(dataView: DataView): string {\r\n        // Try to get from matrix valueSources\r\n        if (dataView.matrix?.valueSources?.[0]?.displayName) {\r\n            return dataView.matrix.valueSources[0].displayName;\r\n        }\r\n        \r\n        // Try to get from metadata columns with 'values' role\r\n        if (dataView.metadata?.columns) {\r\n            const valueColumn = dataView.metadata.columns.find(col => \r\n                col.roles && (col.roles.values || col.roles.value || col.roles.measures || col.roles.measure));\r\n                \r\n            if (valueColumn?.displayName) {\r\n                return valueColumn.displayName;\r\n            }\r\n        }\r\n        \r\n        return \"Amount\"; // Default fallback\r\n    }\r\n\r\n    // Generate unique ID for tracking expanded state\r\n    private getNodeId(node: any, level: number): string {\r\n        const value = node.value !== null && node.value !== undefined ? String(node.value) : \"null\";\r\n        return `level_${level}_${value}`;\r\n    }\r\n    \r\n    // Initialize expanded state for all rows\r\n    private initializeExpandedState(rows: any[], level: number, parentId: string): void {\r\n        if (!rows) return;\r\n        \r\n        for (const row of rows) {\r\n            const nodeId = parentId + this.getNodeId(row, level);\r\n            \r\n            // Set to expanded if not already set (default to expanded)\r\n            if (!this.expandedRows.has(nodeId)) {\r\n                this.expandedRows.set(nodeId, true);\r\n            }\r\n            \r\n            // Initialize children recursively\r\n            if (row.children?.length > 0) {\r\n                this.initializeExpandedState(row.children, level + 1, nodeId);\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Check if a node is expanded\r\n    private isExpanded(nodeId: string): boolean {\r\n        return this.expandedRows.get(nodeId) === true;\r\n    }\r\n    \r\n    // Toggle expanded state of a node\r\n    private toggleExpanded(nodeId: string): void {\r\n        this.expandedRows.set(nodeId, !this.isExpanded(nodeId));\r\n    }\r\n    \r\n    // Main table creation method\r\n    private createMatrixTable(matrix: powerbi.DataViewMatrix, measureName: string): void {\r\n        // Create table\r\n        const table = document.createElement(\"table\");\r\n        table.className = CSS_CLASSES.MATRIX_TABLE;\r\n        \r\n        // Set hover effects based on settings\r\n        if (this.formattingSettings.generalSettings.enableHover.value) {\r\n            table.classList.add(CSS_CLASSES.HOVER_ENABLED);\r\n        }\r\n        \r\n        this.tableDiv.appendChild(table);\r\n        \r\n        // Check if we have rows\r\n        if (!matrix.rows?.root) {\r\n            return;\r\n        }\r\n        \r\n        // Process columns\r\n        const { columns, columnFormats } = this.processColumns(matrix, measureName);\r\n        \r\n        // Create table header\r\n        this.createTableHeader(table, columns, columnFormats);\r\n        \r\n        // Create table body\r\n        const tbody = document.createElement(\"tbody\");\r\n        table.appendChild(tbody);\r\n        \r\n        // Initialize all new rows to expanded state\r\n        if (matrix.rows.root.children) {\r\n            this.initializeExpandedState(matrix.rows.root.children, 0, \"\");\r\n        }\r\n        \r\n        // Render rows recursively with subtotals\r\n        if (matrix.rows.root.children) {\r\n            this.renderRowsWithSubtotals(table, matrix.rows.root.children, columns, 0, \"\");\r\n        }\r\n        \r\n        // Calculate grand totals\r\n        const grandTotals = this.calculateGrandTotals(matrix, columns);\r\n\r\n        // Add grand total row\r\n        this.addGrandTotalRow(table, columns, grandTotals);\r\n\r\n        // Apply all formatting\r\n        this.applyTableFormatting(table);\r\n    }\r\n    \r\n    // Process columns data\r\n    private processColumns(matrix: powerbi.DataViewMatrix, measureName: string): { columns: any[], columnFormats: string[] } {\r\n        let columns: any[] = [];\r\n        let columnFormats: string[] = [];\r\n        \r\n        if (matrix.columns?.root?.children) {\r\n            columns = matrix.columns.root.children;\r\n            \r\n            // Extract column formats if columns are dates\r\n            if (matrix.columns.levels?.[0]?.sources?.[0]?.format) {\r\n                const columnSource = matrix.columns.levels[0].sources[0];\r\n                // Use the same format for all columns if they come from the same source\r\n                columnFormats = columns.map(() => columnSource.format);\r\n            }\r\n        } else {\r\n            // If no columns, create a single column for the measure\r\n            columns = [{ value: null }]; // Empty column header\r\n            columnFormats = [\"\"];\r\n        }\r\n        \r\n        return { columns, columnFormats };\r\n    }\r\n    \r\n    // Create table header\r\n    private createTableHeader(table: HTMLTableElement, columns: any[], columnFormats: string[]): void {\r\n        const thead = document.createElement(\"thead\");\r\n        const headerRow = document.createElement(\"tr\");\r\n        \r\n        // Add corner cell\r\n        const cornerCell = this.createCornerCell();\r\n        headerRow.appendChild(cornerCell);\r\n        \r\n        // Add column headers\r\n        for (let i = 0; i < columns.length; i++) {\r\n            const columnHeader = this.createColumnHeader(columns[i], columnFormats[i]);\r\n            headerRow.appendChild(columnHeader);\r\n        }\r\n        \r\n        thead.appendChild(headerRow);\r\n        table.appendChild(thead);\r\n    }\r\n    \r\n    // Create corner cell (top-left)\r\n    private createCornerCell(): HTMLTableHeaderCellElement {\r\n        const cornerCell = document.createElement(\"th\");\r\n        cornerCell.className = `${CSS_CLASSES.ROW_HEADER} ${CSS_CLASSES.COLUMN_HEADER}`;\r\n        cornerCell.setAttribute(\"style\", \r\n            \"position: sticky !important; \" + \r\n            \"top: 0 !important; \" + \r\n            \"left: 0 !important; \" + \r\n            \"z-index: 1000 !important; \" + \r\n            \"background-color: #e0e0e0;\"\r\n        );\r\n\r\n        this.applyFormatting(cornerCell, 'columnHeader');\r\n        return cornerCell;\r\n    }\r\n    \r\n    // Create column header cell\r\n    private createColumnHeader(column: any, format: string): HTMLTableHeaderCellElement {\r\n        const th = document.createElement(\"th\");\r\n        th.className = CSS_CLASSES.COLUMN_HEADER;\r\n        \r\n        // Apply column width\r\n        const columnWidth = this.formattingSettings.generalSettings.columnWidth.value;\r\n        if (columnWidth) {\r\n            th.style.minWidth = `${columnWidth}px`;\r\n            th.style.width = `${columnWidth}px`;\r\n        }\r\n        \r\n        // Apply formatting\r\n        this.applyFormatting(th, 'columnHeader');\r\n        \r\n        // Set header text\r\n        if (column.value !== null && column.value !== undefined) {\r\n            // Format date headers properly\r\n            if (column.isDate || (typeof column.value === 'object' && column.value.epochTimeStamp)) {\r\n                th.textContent = this.formatDateValue(column.value, format || \"d\");\r\n            } else {\r\n                th.textContent = String(column.value);\r\n            }\r\n        } else if (this.formattingSettings.generalSettings.showMeasureName.value) {\r\n            // Use measure name if column is empty and showMeasureName is true\r\n            th.textContent = this.getMeasureDynamically();\r\n        } else {\r\n            th.textContent = \"\";\r\n        }\r\n        \r\n        return th;\r\n    }\r\n    \r\n    // Helper method to get measure dynamically\r\n    private getMeasureDynamically(): string {\r\n        if (!this.lastOptions?.dataViews?.[0]) return \"Amount\";\r\n        return this.getMeasureName(this.lastOptions.dataViews[0]);\r\n    }\r\n    \r\n    // Format a date value\r\n    private formatDateValue(value: any, format: string = \"M/d/yyyy\"): string {\r\n        if (!value) return \"\";\r\n        \r\n        try {\r\n            // Handle date objects stored in an object with epochTimeStamp\r\n            if (typeof value === 'object' && value.epochTimeStamp) {\r\n                const date = new Date(value.epochTimeStamp);\r\n                \r\n                // Default simple format if no format specified\r\n                if (!format || format === \"d\") {\r\n                    return date.toLocaleDateString();\r\n                }\r\n                \r\n                // Extract date components\r\n                const month = date.getMonth() + 1;\r\n                const day = date.getDate();\r\n                const year = date.getFullYear();\r\n                \r\n                // Replace format tokens with actual values\r\n                let formattedDate = format;\r\n                formattedDate = formattedDate.replace(/M+/g, month.toString().padStart(2, '0'));\r\n                formattedDate = formattedDate.replace(/d+/g, day.toString().padStart(2, '0'));\r\n                formattedDate = formattedDate.replace(/yyyy/g, year.toString());\r\n                formattedDate = formattedDate.replace(/yy/g, year.toString().slice(-2));\r\n                \r\n                return formattedDate;\r\n            }\r\n            \r\n            // Handle native Date objects\r\n            if (value instanceof Date) {\r\n                return value.toLocaleDateString();\r\n            }\r\n            \r\n            return String(value);\r\n        } catch (error) {\r\n            console.error(\"Error formatting date:\", error);\r\n            return String(value);\r\n        }\r\n    }\r\n    \r\n    // Recursive function to render rows with subtotals\r\n    private renderRowsWithSubtotals(\r\n        table: HTMLTableElement, \r\n        rows: any[], \r\n        columns: any[], \r\n        level: number = 0, \r\n        parentId: string = \"\"\r\n    ): void {\r\n        if (!rows?.length) return;\r\n        \r\n        const tbody = table.querySelector('tbody') as HTMLTableSectionElement;\r\n        const columnWidth = this.formattingSettings.generalSettings.columnWidth.value;\r\n        // Always apply subtotal formatting to level0\r\n        const applySubtotalToLevel0 = true;\r\n        \r\n        for (let i = 0; i < rows.length; i++) {\r\n            const row = rows[i];\r\n            const nodeId = parentId + this.getNodeId(row, level);\r\n            const isExpanded = this.isExpanded(nodeId);\r\n            const isLevel0 = level === 0;\r\n            \r\n            // Create row\r\n            const tr = document.createElement(\"tr\");\r\n            tr.setAttribute(\"data-node-id\", nodeId);\r\n            tr.setAttribute(\"data-level\", String(level));\r\n            \r\n            if (isLevel0) {\r\n                tr.classList.add(CSS_CLASSES.LEVEL_0_ROW);\r\n            }\r\n            \r\n            if (row.children?.length > 0) {\r\n                tr.classList.add(CSS_CLASSES.SUBTOTAL_ROW);\r\n            }\r\n\r\n            // Add row header - always apply subtotal formatting to level0\r\n            const rowHeader = this.createRowHeader(row, level, nodeId, isExpanded, isLevel0, true);\r\n            tr.appendChild(rowHeader);\r\n            \r\n            // Add data cells\r\n            if (row.children?.length > 0) {\r\n                // Create subtotal cells\r\n                this.addSubtotalCells(tr, row, columns, isLevel0, columnWidth);\r\n            } else if (row.values) {\r\n                // Create regular data cells\r\n                this.addDataCells(tr, row as any, columns, columnWidth);\r\n            }\r\n            \r\n            tbody.appendChild(tr);\r\n            \r\n            // If this node has children and is expanded, render its children\r\n            if (row.children?.length > 0 && isExpanded) {\r\n                this.renderRowsWithSubtotals(table, row.children, columns, level + 1, nodeId);\r\n            }\r\n            \r\n            // Add blank row if needed\r\n            this.addBlankRowIfNeeded(tbody, columns, i, rows.length, row, level);\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    // Create a row header\r\n    private createRowHeader(\r\n        row: MatrixNode, \r\n        level: number, \r\n        nodeId: string, \r\n        isExpanded: boolean,\r\n        isLevel0: boolean,\r\n        applySubtotalToLevel0: boolean\r\n    ): HTMLTableHeaderCellElement {\r\n        const rowHeader = document.createElement(\"th\");\r\n        rowHeader.className = CSS_CLASSES.ROW_HEADER;\r\n        \r\n        if (isLevel0) {\r\n            rowHeader.classList.add(CSS_CLASSES.LEVEL_0_HEADER);\r\n        }\r\n        \r\n        // Apply row header width\r\n        const rowHeaderWidth = this.formattingSettings.generalSettings.rowHeaderWidth.value;\r\n        if (rowHeaderWidth) {\r\n            rowHeader.style.minWidth = `${rowHeaderWidth}px`;\r\n            rowHeader.style.width = `${rowHeaderWidth}px`;\r\n        }\r\n        \r\n        // Create header content\r\n        const headerContent = document.createElement(\"div\");\r\n        headerContent.className = \"row-header-content\";\r\n        headerContent.style.marginLeft = `${level * 20}px`;\r\n        headerContent.style.display = \"flex\";\r\n        headerContent.style.alignItems = \"center\";\r\n\r\n        // Add toggle button or spacer\r\n        if (row.children?.length > 0) {\r\n            const toggleButton = this.createToggleButton(nodeId, isExpanded);\r\n            headerContent.appendChild(toggleButton);\r\n        } else {\r\n            // Add spacer for better alignment\r\n            const spacer = document.createElement(\"span\");\r\n            spacer.className = \"toggle-spacer\";\r\n            spacer.textContent = \"  \";\r\n            spacer.style.flexShrink = \"0\";\r\n            headerContent.appendChild(spacer);\r\n        }\r\n        \r\n        // Add the row label\r\n        const label = this.createRowLabel(row);\r\n        headerContent.appendChild(label);\r\n        rowHeader.appendChild(headerContent);\r\n        \r\n        // Apply formatting based on level\r\n        if (isLevel0 && applySubtotalToLevel0) {\r\n            this.applyFormatting(rowHeader, 'subtotal');\r\n        } else {\r\n            this.applyFormatting(rowHeader, 'rowHeader');\r\n        }\r\n        \r\n        return rowHeader;\r\n    }\r\n    \r\n    // Create toggle button for expanding/collapsing rows\r\n    private createToggleButton(nodeId: string, isExpanded: boolean): HTMLSpanElement {\r\n        const toggleButton = document.createElement(\"span\");\r\n        toggleButton.className = \"toggle-button\";\r\n        toggleButton.textContent = isExpanded ? \"▼\" : \"►\";\r\n        toggleButton.style.flexShrink = \"0\";\r\n        toggleButton.onclick = (event) => {\r\n            event.stopPropagation();\r\n            this.toggleExpanded(nodeId);\r\n            this.renderVisualWithCurrentState();\r\n        };\r\n        return toggleButton;\r\n    }\r\n    \r\n    // Create row label element\r\n    private createRowLabel(row: MatrixNode): HTMLSpanElement {\r\n        const label = document.createElement(\"span\");\r\n        label.className = \"row-label\";\r\n        label.style.width = \"100%\";\r\n\r\n        // Format date row headers properly\r\n        if (row.isDate || (typeof row.value === 'object' && row.value.epochTimeStamp)) {\r\n            label.textContent = this.formatDateValue(row.value);\r\n        } else {\r\n            label.textContent = row.value !== null && row.value !== undefined ? String(row.value) : \"\";\r\n        }\r\n\r\n        // Apply alignment\r\n        const alignment = this.formattingSettings.rowHeaderFormatSettings.alignment?.value?.value;\r\n        if (alignment) {\r\n            label.style.textAlign = String(alignment);\r\n            label.style.display = \"block\";\r\n        }\r\n\r\n        return label;\r\n    }\r\n    \r\n    // Add subtotal cells to a row\r\n    private addSubtotalCells(\r\n        tr: HTMLTableRowElement, \r\n        row: MatrixNode, \r\n        columns: any[], \r\n        isLevel0: boolean,\r\n        columnWidth: number\r\n    ): void {\r\n        for (let j = 0; j < columns.length; j++) {\r\n            const td = document.createElement(\"td\");\r\n            td.className = `${CSS_CLASSES.DATA_CELL} ${CSS_CLASSES.SUBTOTAL_CELL}`;\r\n            \r\n            if (isLevel0) {\r\n                td.classList.add(CSS_CLASSES.LEVEL_0_SUBTOTAL);\r\n            }\r\n            \r\n            // Apply column width\r\n            if (columnWidth) {\r\n                td.style.minWidth = `${columnWidth}px`;\r\n                td.style.width = `${columnWidth}px`;\r\n            }\r\n            \r\n            // Calculate subtotal\r\n            const subtotal = this.calculateSubtotalForColumn(row, j);\r\n            \r\n            // Only display non-zero subtotals\r\n            td.textContent = subtotal !== 0 ? this.formatNumber(subtotal) : \"\";\r\n            \r\n            // Apply alignment from subtotal settings for subtotal cells\r\n            const alignment = this.formattingSettings.subtotalFormatSettings.alignment?.value?.value;\r\n            if (alignment !== undefined) {\r\n                td.style.textAlign = alignment.toString();\r\n            }\r\n            \r\n            tr.appendChild(td);\r\n        }\r\n    }\r\n    \r\n    // Add regular data cells to a row\r\n    private addDataCells(\r\n        tr: HTMLTableRowElement, \r\n        row: any, // Use any to handle both types\r\n        columns: any[], \r\n        columnWidth: number\r\n    ): void {\r\n        for (let j = 0; j < columns.length; j++) {\r\n            const td = document.createElement(\"td\");\r\n            td.className = CSS_CLASSES.DATA_CELL;\r\n            \r\n            // Apply column width\r\n            if (columnWidth) {\r\n                td.style.minWidth = `${columnWidth}px`;\r\n                td.style.width = `${columnWidth}px`;\r\n            }\r\n            \r\n            // Get cell value and format it\r\n            const value = row.values[j];\r\n            td.textContent = this.formatCellValue(value);\r\n            \r\n            tr.appendChild(td);\r\n        }\r\n    }\r\n    \r\n    // Add blank row if settings indicate one is needed\r\n    private addBlankRowIfNeeded(\r\n        tbody: HTMLTableSectionElement, \r\n        columns: any[], \r\n        currentIndex: number, \r\n        totalRows: number, \r\n        currentRow: MatrixNode,\r\n        level: number\r\n    ): void {\r\n        const blankRowSettings = this.formattingSettings.blankRowSettings;\r\n        \r\n        // Only add blank rows if the setting is enabled\r\n        if (!blankRowSettings.enableBlankRows.value) {\r\n            return;\r\n        }\r\n        \r\n        // Add blank row after each top-level item (level 0) except the last one\r\n        if (level === 0 && currentIndex < totalRows - 1) {\r\n            // Create blank row\r\n            const blankRow = document.createElement(\"tr\");\r\n            blankRow.className = CSS_CLASSES.BLANK_ROW;\r\n            \r\n            // Set the height if specified\r\n            const rowHeight = blankRowSettings.height.value;\r\n            if (rowHeight > 0) {\r\n                blankRow.style.height = `${rowHeight}px`;\r\n            }\r\n            \r\n            // Create a cell that spans all columns\r\n            const blankCell = document.createElement(\"td\");\r\n            blankCell.colSpan = columns.length + 1; // +1 for row header column\r\n            \r\n            // Apply background color from settings\r\n            const bgColor = blankRowSettings.backgroundColor.value.value;\r\n            if (bgColor) {\r\n                blankCell.style.backgroundColor = bgColor;\r\n            }\r\n            \r\n            // Add the cell to the row and the row to the table\r\n            blankRow.appendChild(blankCell);\r\n            tbody.appendChild(blankRow);\r\n        }\r\n    }\r\n    \r\n    // Format cell value based on type\r\n    private formatCellValue(value: any): string {\r\n        if (value === null || value === undefined) {\r\n            return \"\";\r\n        }\r\n        \r\n        if (typeof value === 'number') {\r\n            return this.formatNumber(value);\r\n        }\r\n        \r\n        if (typeof value === 'object') {\r\n            // Extract value from object\r\n            if ('value' in value) {\r\n                const cellValue = value.value;\r\n                if (typeof cellValue === 'number') {\r\n                    return this.formatNumber(cellValue);\r\n                } else if (cellValue === null || cellValue === undefined || \r\n                        (typeof cellValue === 'object' && Object.keys(cellValue).length === 0)) {\r\n                    return \"\";\r\n                } else {\r\n                    return String(cellValue);\r\n                }\r\n            } else if (Object.keys(value).length === 0) {\r\n                return \"\";\r\n            } else {\r\n                return JSON.stringify(value);\r\n            }\r\n        }\r\n        \r\n        return String(value);\r\n    }\r\n    \r\n    // Calculate subtotal for a parent node and column\r\n    private calculateSubtotalForColumn(parentNode: any, columnIndex: number): number {\r\n        if (!parentNode?.children?.length) {\r\n            return 0;\r\n        }\r\n        \r\n        let total = 0;\r\n        \r\n        for (const child of parentNode.children) {\r\n            if (child.children?.length > 0) {\r\n                // Recursively get subtotals from children\r\n                total += this.calculateSubtotalForColumn(child, columnIndex);\r\n            } else {\r\n                // Leaf node with values\r\n                if (child.values?.[columnIndex]?.value !== null && \r\n                    child.values[columnIndex]?.value !== undefined &&\r\n                    typeof child.values[columnIndex].value === 'number') {\r\n                    total += child.values[columnIndex].value;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return total;\r\n    }\r\n        /**\r\n     * Calculate grand totals for all columns\r\n     */\r\n    private calculateGrandTotals(matrix: powerbi.DataViewMatrix, columns: any[]): number[] {\r\n        const totals: number[] = new Array(columns.length).fill(0);\r\n        \r\n        // If no rows, return zeros\r\n        if (!matrix.rows?.root?.children) {\r\n            return totals;\r\n        }\r\n        \r\n        // Function to recursively process all leaf nodes\r\n        const processNode = (node: any, level: number) => {\r\n            if (node.children && node.children.length > 0) {\r\n                // Process children recursively\r\n                for (const child of node.children) {\r\n                    processNode(child, level + 1);\r\n                }\r\n            } else if (node.values) {\r\n                // This is a leaf node with values\r\n                for (let i = 0; i < columns.length; i++) {\r\n                    if (node.values[i]?.value !== null && \r\n                        node.values[i]?.value !== undefined &&\r\n                        typeof node.values[i].value === 'number') {\r\n                        totals[i] += node.values[i].value;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        \r\n        // Process all rows starting from the root\r\n        for (const row of matrix.rows.root.children) {\r\n            processNode(row, 0);\r\n        }\r\n        \r\n        return totals;\r\n    }\r\n\r\n    /**\r\n     * Create and append grand total row\r\n     */\r\n    private addGrandTotalRow(table: HTMLTableElement, columns: any[], totals: number[]): void {\r\n        const settings = this.formattingSettings;\r\n        \r\n        // Check if grand total is enabled\r\n        if (!settings.grandTotalSettings.show.value) {\r\n            return;\r\n        }\r\n        \r\n        // Get the footer or create one if it doesn't exist\r\n        let tfoot = table.querySelector('tfoot');\r\n        if (!tfoot) {\r\n            tfoot = document.createElement('tfoot');\r\n            table.appendChild(tfoot);\r\n        } else {\r\n            // Clear existing content\r\n            tfoot.innerHTML = '';\r\n        }\r\n        \r\n        // Create the grand total row\r\n        const tr = document.createElement('tr');\r\n        tr.className = CSS_CLASSES.GRAND_TOTAL_ROW;\r\n        \r\n        // Set the row to be sticky to the bottom\r\n        tr.style.position = 'sticky';\r\n        tr.style.bottom = '0';\r\n        tr.style.zIndex = '5';\r\n        \r\n        // Create the label cell\r\n        const labelCell = document.createElement('th');\r\n        labelCell.textContent = settings.grandTotalSettings.label.value || 'Grand Total';\r\n        labelCell.style.position = 'sticky';\r\n        labelCell.style.left = '0';\r\n        labelCell.style.zIndex = '6'; // Higher than the row to ensure it stays on top\r\n        tr.appendChild(labelCell);\r\n        \r\n        // Create the total cells\r\n        for (let i = 0; i < columns.length; i++) {\r\n            const td = document.createElement('td');\r\n            td.textContent = this.formatNumber(totals[i]);\r\n            tr.appendChild(td);\r\n        }\r\n        \r\n        // Apply formatting to each cell in the grand total row\r\n        const cells = tr.querySelectorAll('th, td');\r\n        cells.forEach(cell => {\r\n            this.applyFormatting(cell as HTMLElement, 'grandTotal');\r\n        });\r\n        \r\n        // Add the row to the footer\r\n        tfoot.appendChild(tr);\r\n    }\r\n    \r\n    // Format number with locale and decimal places\r\n    private formatNumber(value: number): string {\r\n        return value.toLocaleString(undefined, {\r\n            minimumFractionDigits: 0,\r\n            maximumFractionDigits: 2\r\n        });\r\n    }\r\n    \r\n    // Apply all formatting to the table\r\n    private applyTableFormatting(table: HTMLTableElement): void {\r\n        if (!this.formattingSettings) {\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            // Apply general font size to table\r\n            const fontSize = this.formattingSettings.generalSettings.fontSize.value;\r\n            table.style.fontSize = `${fontSize}pt`;\r\n            \r\n            // Apply font family\r\n            const fontFamily = this.formattingSettings.generalSettings.fontFamily.value;\r\n            if (fontFamily) {\r\n                table.style.fontFamily = fontFamily;\r\n            }\r\n            \r\n            // Apply formatting to different cell types\r\n            this.formatCellsByType(table);\r\n            \r\n            // Apply global border settings\r\n            this.applyGlobalBorders(table);\r\n            \r\n        } catch (error) {\r\n            console.error(\"Error applying formatting:\", error);\r\n        }\r\n    }\r\n    \r\n    // Format cells by type (data, subtotal, etc.)\r\n    private formatCellsByType(table: HTMLTableElement): void {\r\n        // Format by cell type using CSS selectors\r\n        const regularCells = table.querySelectorAll('td.data-cell:not(.subtotal-cell):not(.level-0-subtotal)');\r\n        const subtotalCells = table.querySelectorAll('td.subtotal-cell, td.level-0-subtotal');\r\n        const regularRowHeaders = table.querySelectorAll('tr:not(.subtotal-row) > th.row-header');\r\n        const subtotalRowHeaders = table.querySelectorAll('tr.subtotal-row > th.row-header');\r\n        const columnHeaderCells = table.querySelectorAll('th.column-header:not(.row-header)');\r\n        const cornerCell = table.querySelector('th.row-header.column-header');\r\n    \r\n        // Apply formatting to each cell type\r\n        regularCells.forEach((cell: HTMLTableCellElement) => {\r\n            this.applyFormatting(cell, 'data');\r\n        });\r\n        \r\n        subtotalCells.forEach((cell: HTMLTableCellElement) => {\r\n            this.applyFormatting(cell, 'subtotal');\r\n        });\r\n        \r\n        regularRowHeaders.forEach((cell: HTMLTableCellElement) => {\r\n            this.applyFormatting(cell, 'rowHeader');\r\n        });\r\n        \r\n        subtotalRowHeaders.forEach((cell: HTMLTableCellElement) => {\r\n            this.applyFormatting(cell, 'subtotal');\r\n        });\r\n        \r\n        columnHeaderCells.forEach((cell: HTMLTableCellElement) => {\r\n            this.applyFormatting(cell, 'columnHeader');\r\n        });\r\n        \r\n        if (cornerCell) {\r\n            this.applyFormatting(cornerCell as HTMLTableCellElement, 'columnHeader');\r\n        }\r\n    }\r\n    \r\n    // Apply formatting to a specific element based on its type\r\n    private applyFormatting(\r\n        element: HTMLElement, \r\n        type: 'data' | 'rowHeader' | 'columnHeader' | 'subtotal' | 'grandTotal',\r\n        isSubtotal: boolean = false\r\n    ): void {\r\n        const settings = this.formattingSettings;\r\n        if (!settings) return;\r\n        \r\n        // Apply global font family from general settings\r\n        const globalFontFamily = settings.generalSettings.fontFamily.value;\r\n        if (globalFontFamily) {\r\n            element.style.fontFamily = globalFontFamily;\r\n        }\r\n        \r\n        // If this is a subtotal, override the type\r\n        if (isSubtotal) {\r\n            type = 'subtotal';\r\n        }\r\n        \r\n        switch (type) {\r\n            case 'data':\r\n                const font = settings.fontFormatSettings;\r\n                \r\n                // Font color\r\n                if (font.color?.value?.value) {\r\n                    element.style.color = font.color.value.value;\r\n                }\r\n                \r\n                // Font size\r\n                if (font.fontSize?.value) {\r\n                    element.style.fontSize = `${font.fontSize.value}pt`;\r\n                }\r\n                \r\n                // Font styling\r\n                if (font.bold?.value) {\r\n                    element.style.fontWeight = 'bold';\r\n                } else {\r\n                    element.style.fontWeight = 'normal';\r\n                }\r\n                \r\n                if (font.italic?.value) {\r\n                    element.style.fontStyle = 'italic';\r\n                } else {\r\n                    element.style.fontStyle = 'normal';\r\n                }\r\n                \r\n                if (font.underline?.value) {\r\n                    element.style.textDecoration = 'underline';\r\n                } else {\r\n                    element.style.textDecoration = 'none';\r\n                }\r\n                \r\n                // Background color\r\n                if (font.backgroundColor?.value?.value) {\r\n                    element.style.backgroundColor = font.backgroundColor.value.value;\r\n                }\r\n\r\n                // Alignment\r\n                if (font.alignment?.value?.value !== undefined) {\r\n                    element.style.textAlign = font.alignment.value.value.toString();\r\n                }\r\n                break;\r\n                \r\n            case 'rowHeader':\r\n                const rowFormat = settings.rowHeaderFormatSettings;\r\n                \r\n                // Font color\r\n                if (rowFormat.color?.value?.value) {\r\n                    element.style.color = rowFormat.color.value.value;\r\n                }\r\n                \r\n                // Font size\r\n                if (rowFormat.fontSize?.value) {\r\n                    element.style.fontSize = `${rowFormat.fontSize.value}pt`;\r\n                }\r\n                \r\n                // Background color\r\n                if (rowFormat.backgroundColor?.value?.value) {\r\n                    element.style.backgroundColor = rowFormat.backgroundColor.value.value;\r\n                }\r\n                \r\n                // Font styling\r\n                if (rowFormat.bold?.value) {\r\n                    element.style.fontWeight = 'bold';\r\n                } else {\r\n                    element.style.fontWeight = 'normal';\r\n                }\r\n                \r\n                if (rowFormat.italic?.value) {\r\n                    element.style.fontStyle = 'italic';\r\n                } else {\r\n                    element.style.fontStyle = 'normal';\r\n                }\r\n                \r\n                if (rowFormat.underline?.value) {\r\n                    element.style.textDecoration = 'underline';\r\n                } else {\r\n                    element.style.textDecoration = 'none';\r\n                }\r\n\r\n                // Alignment\r\n                if (rowFormat.alignment?.value?.value !== undefined) {\r\n                    element.style.textAlign = rowFormat.alignment.value.value.toString();\r\n                }\r\n                break;\r\n                \r\n            case 'columnHeader':\r\n                const headerFormat = settings.columnHeaderFormatSettings;\r\n                \r\n                // Font color\r\n                if (headerFormat.color?.value?.value) {\r\n                    element.style.color = headerFormat.color.value.value;\r\n                }\r\n                \r\n                // Font size\r\n                if (headerFormat.fontSize?.value) {\r\n                    element.style.fontSize = `${headerFormat.fontSize.value}pt`;\r\n                }\r\n                \r\n                // Background color\r\n                if (headerFormat.backgroundColor?.value?.value) {\r\n                    element.style.backgroundColor = headerFormat.backgroundColor.value.value;\r\n                }\r\n                \r\n                // Font styling\r\n                if (headerFormat.bold?.value) {\r\n                    element.style.fontWeight = 'bold';\r\n                } else {\r\n                    element.style.fontWeight = 'normal';\r\n                }\r\n                \r\n                if (headerFormat.italic?.value) {\r\n                    element.style.fontStyle = 'italic';\r\n                } else {\r\n                    element.style.fontStyle = 'normal';\r\n                }\r\n                \r\n                if (headerFormat.underline?.value) {\r\n                    element.style.textDecoration = 'underline';\r\n                } else {\r\n                    element.style.textDecoration = 'none';\r\n                }\r\n\r\n                // Alignment\r\n                if (headerFormat.alignment?.value?.value !== undefined) {\r\n                    element.style.textAlign = headerFormat.alignment.value.value.toString();\r\n                }\r\n                break;\r\n                \r\n            case 'subtotal':\r\n                const subtotalFormat = settings.subtotalFormatSettings;\r\n                \r\n                // Font color\r\n                if (subtotalFormat.color?.value?.value) {\r\n                    element.style.color = subtotalFormat.color.value.value;\r\n                }\r\n                \r\n                // Font size\r\n                if (subtotalFormat.fontSize?.value) {\r\n                    element.style.fontSize = `${subtotalFormat.fontSize.value}pt`;\r\n                }\r\n                \r\n                // Background color\r\n                if (subtotalFormat.backgroundColor?.value?.value) {\r\n                    element.style.backgroundColor = subtotalFormat.backgroundColor.value.value;\r\n                }\r\n                \r\n                // Font styling\r\n                if (subtotalFormat.bold?.value) {\r\n                    element.style.fontWeight = 'bold';\r\n                } else {\r\n                    element.style.fontWeight = 'normal';\r\n                }\r\n                \r\n                if (subtotalFormat.italic?.value) {\r\n                    element.style.fontStyle = 'italic';\r\n                } else {\r\n                    element.style.fontStyle = 'normal';\r\n                }\r\n                \r\n                if (subtotalFormat.underline?.value) {\r\n                    element.style.textDecoration = 'underline';\r\n                } else {\r\n                    element.style.textDecoration = 'none';\r\n                }\r\n                \r\n                // Alignment\r\n                if (subtotalFormat.alignment?.value?.value !== undefined) {\r\n                    element.style.textAlign = subtotalFormat.alignment.value.value.toString();\r\n                }\r\n                break;\r\n            case 'grandTotal':\r\n                const grandTotalFormat = settings.grandTotalSettings;\r\n                \r\n                // Font color\r\n                if (grandTotalFormat.color?.value?.value) {\r\n                    element.style.color = grandTotalFormat.color.value.value;\r\n                }\r\n                \r\n                // Font size\r\n                if (grandTotalFormat.fontSize?.value) {\r\n                    element.style.fontSize = `${grandTotalFormat.fontSize.value}pt`;\r\n                }\r\n                \r\n                // Background color\r\n                if (grandTotalFormat.backgroundColor?.value?.value) {\r\n                    element.style.backgroundColor = grandTotalFormat.backgroundColor.value.value;\r\n                }\r\n                \r\n                // Font styling\r\n                if (grandTotalFormat.bold?.value) {\r\n                    element.style.fontWeight = 'bold';\r\n                } else {\r\n                    element.style.fontWeight = 'normal';\r\n                }\r\n                \r\n                if (grandTotalFormat.italic?.value) {\r\n                    element.style.fontStyle = 'italic';\r\n                } else {\r\n                    element.style.fontStyle = 'normal';\r\n                }\r\n                \r\n                if (grandTotalFormat.underline?.value) {\r\n                    element.style.textDecoration = 'underline';\r\n                } else {\r\n                    element.style.textDecoration = 'none';\r\n                }\r\n                \r\n                // Apply alignment to the data cells, but not the label\r\n                if (element.tagName === 'TD' && grandTotalFormat.alignment?.value?.value !== undefined) {\r\n                    element.style.textAlign = grandTotalFormat.alignment.value.value.toString();\r\n                } else if (element.tagName === 'TH') {\r\n                    // The label cell should align left\r\n                    element.style.textAlign = 'left';\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    // Apply border settings to the table\r\n    private applyGlobalBorders(table: HTMLTableElement): void {\r\n        const borderSettings = this.formattingSettings.borderSettings;\r\n        \r\n        if (!borderSettings?.show?.value) {\r\n            // If borders are turned off, remove all border classes\r\n            table.classList.remove(CSS_CLASSES.WITH_BORDERS);\r\n            table.classList.remove(CSS_CLASSES.WITH_HORIZONTAL_BORDERS);\r\n            table.classList.remove(CSS_CLASSES.WITH_VERTICAL_BORDERS);\r\n            return;\r\n        }\r\n        \r\n        // Get border properties\r\n        const borderColor = borderSettings.color.value.value;\r\n        const borderWidth = borderSettings.width.value;\r\n        const showHorizontal = borderSettings.horizontalBorders.value;\r\n        const showVertical = borderSettings.verticalBorders.value;\r\n        \r\n        // Add classes based on which borders are enabled\r\n        table.classList.add(CSS_CLASSES.WITH_BORDERS);\r\n        \r\n        if (showHorizontal) {\r\n            table.classList.add(CSS_CLASSES.WITH_HORIZONTAL_BORDERS);\r\n        } else {\r\n            table.classList.remove(CSS_CLASSES.WITH_HORIZONTAL_BORDERS);\r\n        }\r\n        \r\n        if (showVertical) {\r\n            table.classList.add(CSS_CLASSES.WITH_VERTICAL_BORDERS);\r\n        } else {\r\n            table.classList.remove(CSS_CLASSES.WITH_VERTICAL_BORDERS);\r\n        }\r\n        \r\n        // Set CSS variables for border styling\r\n        table.style.setProperty('--border-color', borderColor);\r\n        table.style.setProperty('--border-width', `${borderWidth}px`);\r\n        table.style.setProperty('--border-style', 'solid');\r\n    }\r\n    \r\n    // Helper method to adjust color brightness\r\n    private adjustColor(color: string, amount: number): string {\r\n        // Handle empty or invalid colors\r\n        if (!color || color === 'transparent' || color === 'inherit' || color === 'initial') {\r\n            return color;\r\n        }\r\n        \r\n        try {\r\n            // Convert hex to RGB\r\n            let hex = color;\r\n            if (hex.startsWith('#')) {\r\n                hex = hex.slice(1);\r\n            }\r\n            \r\n            // If not a proper hex color, return a default color\r\n            if (!/^[0-9A-Fa-f]{3}$|^[0-9A-Fa-f]{6}$/.test(hex)) {\r\n                return amount < 0 ? '#e0e0e0' : '#f5f5f5';\r\n            }\r\n            \r\n            // Parse hex to RGB\r\n            let r = parseInt(hex.length === 3 ? hex.slice(0, 1).repeat(2) : hex.slice(0, 2), 16);\r\n            let g = parseInt(hex.length === 3 ? hex.slice(1, 2).repeat(2) : hex.slice(2, 4), 16);\r\n            let b = parseInt(hex.length === 3 ? hex.slice(2, 3).repeat(2) : hex.slice(4, 6), 16);\r\n            \r\n            // Adjust color\r\n            r = Math.max(0, Math.min(255, r + amount));\r\n            g = Math.max(0, Math.min(255, g + amount));\r\n            b = Math.max(0, Math.min(255, b + amount));\r\n            \r\n            // Convert back to hex\r\n            return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n        } catch (error) {\r\n            console.error(\"Error adjusting color:\", error);\r\n            return amount < 0 ? '#e0e0e0' : '#f5f5f5';\r\n        }\r\n    }\r\n    \r\n    // Optimized re-rendering when toggling rows\r\n    private renderVisualWithCurrentState(): void {\r\n        // Use a small timeout to ensure DOM updates\r\n        setTimeout(() => {\r\n            if (this.lastOptions) {\r\n                try {\r\n                    // Store current scroll position\r\n                    const scrollTop = this.tableDiv.scrollTop;\r\n                    const scrollLeft = this.tableDiv.scrollLeft;\r\n                    \r\n                    // Clear and rebuild the table\r\n                    this.tableDiv.innerHTML = \"\";\r\n                    \r\n                    const dataView = this.lastOptions?.dataViews?.[0];\r\n                    if (!dataView?.matrix) return;\r\n                    \r\n                    // Get measure name and rebuild the table\r\n                    const measureName = this.getMeasureName(dataView);\r\n                    this.createMatrixTable(dataView.matrix, measureName);\r\n                    \r\n                    // Restore scroll position\r\n                    this.tableDiv.scrollTop = scrollTop;\r\n                    this.tableDiv.scrollLeft = scrollLeft;\r\n                    \r\n                } catch (error) {\r\n                    console.error(\"Error in visual re-render:\", error);\r\n                }\r\n            }\r\n        }, 10);\r\n    }\r\n    \r\n    public getFormattingModel(): powerbi.visuals.FormattingModel {\r\n        return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Visual } from \"../../src/visual\";\nimport powerbiVisualsApi from \"powerbi-visuals-api\";\nimport IVisualPlugin = powerbiVisualsApi.visuals.plugins.IVisualPlugin;\nimport VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;\nimport DialogConstructorOptions = powerbiVisualsApi.extensibility.visual.DialogConstructorOptions;\nvar powerbiKey: any = \"powerbi\";\nvar powerbi: any = window[powerbiKey];\nvar customMatrix3D2AF31BB00A42FC89209A2F7F87EB77_DEBUG: IVisualPlugin = {\n    name: 'customMatrix3D2AF31BB00A42FC89209A2F7F87EB77_DEBUG',\n    displayName: 'CustomMatrix',\n    class: 'Visual',\n    apiVersion: '5.3.0',\n    create: (options?: VisualConstructorOptions) => {\n        if (Visual) {\n            return new Visual(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId: string, options: DialogConstructorOptions, initialState: object) => {\n        const dialogRegistry = (<any>globalThis).dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"customMatrix3D2AF31BB00A42FC89209A2F7F87EB77_DEBUG\"] = customMatrix3D2AF31BB00A42FC89209A2F7F87EB77_DEBUG;\n}\nexport default customMatrix3D2AF31BB00A42FC89209A2F7F87EB77_DEBUG;"],"names":[],"sourceRoot":""}