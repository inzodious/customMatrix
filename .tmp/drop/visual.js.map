{"version":3,"file":"visual.js","mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrC2E;AACpE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kFAAa;AACjD;AACA,4DAA4D,+EAAU;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,+EAAU;AAC3D;AACA,iCAAiC,gBAAgB;AACjD,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,wGAAwG;AAC7J;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,oGAAoG;AACrJ;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,kDAAkD;AAC9E;AACA,yEAAyE,gBAAgB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB,GAAG,uBAAuB;AAC3F;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kFAAa;AACzC;AACA,oDAAoD,+EAAU;AAC9D,6BAA6B,gBAAgB;AAC7C,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,yBAAyB,EAAC;AACzC;;;;;;;;;;;;;AChMqE;AACD;AACX;AACzD;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AAC4E;AAC5E;AACA;AACO;AACP;AACO;AACP;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,wBAAwB,kFAAsC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB,qFAAyC;AAC9D;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,oFAAoF;AAChL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,uBAAuB;AACnH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,qKAAqK;AACjQ;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,4EAA4E;AACxK;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,+BAA+B;AAC3H;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,yDAAyD;AACrJ;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO,4BAA4B,2DAAW;AAC9C;AACA;;;;;;;;;;;;ACpTA;;;;;;GAMG;AACU;AAGqE;AAClD;AAQ2B;AAEpD,MAAM,MAAM;IACP,MAAM,CAAc;IACpB,QAAQ,CAAiB;IACzB,WAAW,CAAS;IACpB,kBAAkB,CAAgC;IAClD,yBAAyB,CAA4B;IAC7D,2BAA2B;IACnB,IAAI,CAA2C;IACvD,uBAAuB;IACf,YAAY,CAAuB;IAC3C,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","sources":["webpack:///./src/settings.ts","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/utils/FormattingSettingsUtils.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsService.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/index.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsComponents.js","webpack:///./src/visual.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./.tmp/precompile/visualPlugin.ts"],"sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport { formattingSettings } from \"powerbi-visuals-utils-formattingmodel\";\r\nimport powerbi from \"powerbi-visuals-api\";\r\n\r\nimport FormattingSettingsCard = formattingSettings.SimpleCard;\r\nimport FormattingSettingsSlice = formattingSettings.Slice;\r\nimport FormattingSettingsModel = formattingSettings.Model;\r\n\r\n/**\r\n * General Settings Card\r\n */\r\nclass GeneralSettings extends FormattingSettingsCard {\r\n    fontSize = new formattingSettings.NumUpDown({\r\n        name: \"fontSize\",\r\n        displayName: \"Font Size\",\r\n        value: 10\r\n    });\r\n\r\n    showMeasureName = new formattingSettings.ToggleSwitch({\r\n        name: \"showMeasureName\",\r\n        displayName: \"Show Measure Name\",\r\n        value: true\r\n    });\r\n    \r\n    columnWidth = new formattingSettings.NumUpDown({\r\n        name: \"columnWidth\",\r\n        displayName: \"Column Width\",\r\n        value: 100\r\n    });\r\n    \r\n    enableHover = new formattingSettings.ToggleSwitch({\r\n        name: \"enableHover\",\r\n        displayName: \"Enable Hover Effects\",\r\n        value: true\r\n    });\r\n\r\n    rowHeaderWidth = new formattingSettings.NumUpDown({\r\n        name: \"rowHeaderWidth\",\r\n        displayName: \"Row Header Width\",\r\n        value: 200 // Default width\r\n    });\r\n\r\n    name: string = \"general\";\r\n    displayName: string = \"General\";\r\n    slices: Array<FormattingSettingsSlice> = [\r\n        this.fontSize, \r\n        this.showMeasureName, \r\n        this.columnWidth, \r\n        this.rowHeaderWidth,\r\n        this.enableHover\r\n];\r\n}\r\n\r\n/**\r\n * Border Settings Card\r\n */\r\nclass BorderSettings extends FormattingSettingsCard {\r\n    show = new formattingSettings.ToggleSwitch({\r\n        name: \"show\",\r\n        displayName: \"Show Borders\",\r\n        value: true\r\n    });\r\n\r\n    color = new formattingSettings.ColorPicker({\r\n        name: \"color\",\r\n        displayName: \"Border Color\",\r\n        value: { value: \"#FFFFF\" },\r\n        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\r\n    });\r\n\r\n    width = new formattingSettings.NumUpDown({\r\n        name: \"width\",\r\n        displayName: \"Border Width\",\r\n        value: 1\r\n    });\r\n\r\n    horizontalBorders = new formattingSettings.ToggleSwitch({\r\n        name: \"horizontalBorders\",\r\n        displayName: \"Horizontal Borders\",\r\n        value: true\r\n    });\r\n\r\n    verticalBorders = new formattingSettings.ToggleSwitch({\r\n        name: \"verticalBorders\",\r\n        displayName: \"Vertical Borders\",\r\n        value: true\r\n    });\r\n\r\n    name: string = \"borderSettings\";\r\n    displayName: string = \"Borders\";\r\n    slices: Array<FormattingSettingsSlice> = [\r\n        this.show, \r\n        this.color, \r\n        this.width, \r\n        this.horizontalBorders, \r\n        this.verticalBorders\r\n    ];\r\n}\r\n\r\n/**\r\n * Font Formatting Card\r\n */\r\nclass FontFormatSettings extends FormattingSettingsCard {\r\n    color = new formattingSettings.ColorPicker({\r\n        name: \"color\",\r\n        displayName: \"Font Color\",\r\n        value: { value: \"#000000\" },\r\n        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\r\n    });\r\n\r\n    fontFamily = new formattingSettings.TextInput({\r\n        name: \"fontFamily\",\r\n        displayName: \"Font Family\",\r\n        value: \"Segoe UI, sans-serif\",\r\n        placeholder: \"Enter font family\"\r\n    });\r\n\r\n    fontSize = new formattingSettings.NumUpDown({\r\n        name: \"fontSize\",\r\n        displayName: \"Font Size\",\r\n        value: 10\r\n    });\r\n\r\n    bold = new formattingSettings.ToggleSwitch({\r\n        name: \"bold\",\r\n        displayName: \"Bold\",\r\n        value: false\r\n    });\r\n\r\n    italic = new formattingSettings.ToggleSwitch({\r\n        name: \"italic\",\r\n        displayName: \"Italic\",\r\n        value: false\r\n    });\r\n\r\n    underline = new formattingSettings.ToggleSwitch({\r\n        name: \"underline\",\r\n        displayName: \"Underline\",\r\n        value: false\r\n    });\r\n    \r\n    // Adding background settings to Font card\r\n    backgroundColor = new formattingSettings.ColorPicker({\r\n        name: \"backgroundColor\",\r\n        displayName: \"Background Color\",\r\n        value: { value: \"#FFFFFF\" },\r\n        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\r\n    });\r\n\r\n    dataAlignment = new formattingSettings.ItemDropdown({\r\n        name: \"dataAlignment\",\r\n        displayName: \"Data Alignment\",\r\n        items: [\r\n            { displayName: \"Left\", value: \"left\" },\r\n            { displayName: \"Center\", value: \"center\" },\r\n            { displayName: \"Right\", value: \"right\" }\r\n        ],\r\n        value: { value: \"right\", displayName: \"Right\" } // Added displayName\r\n    });\r\n\r\n    // Data Cells Font\r\n    name: string = \"fontFormat\";\r\n    displayName: string = \"Values\";\r\n    slices: Array<FormattingSettingsSlice> = [\r\n        this.color, this.fontFamily, this.fontSize,\r\n        this.bold, this.italic, this.underline,\r\n        this.backgroundColor, this.dataAlignment\r\n    ];\r\n}\r\n\r\n/**\r\n * Column Header Formatting Card\r\n */\r\nclass ColumnHeaderFormatSettings extends FormattingSettingsCard {\r\n    backgroundColor = new formattingSettings.ColorPicker({\r\n        name: \"backgroundColor\",\r\n        displayName: \"Background Color\",\r\n        value: { value: \"#E0E0E0\" },\r\n        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\r\n    });\r\n\r\n    fontColor = new formattingSettings.ColorPicker({\r\n        name: \"fontColor\",\r\n        displayName: \"Font Color\",\r\n        value: { value: \"#000000\" },\r\n        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\r\n    });\r\n    \r\n    bold = new formattingSettings.ToggleSwitch({\r\n        name: \"bold\",\r\n        displayName: \"Bold\",\r\n        value: true\r\n    });\r\n\r\n    alignment = new formattingSettings.ItemDropdown({\r\n        name: \"alignment\",\r\n        displayName: \"Text Alignment\",\r\n        items: [\r\n            { displayName: \"Left\", value: \"left\" },\r\n            { displayName: \"Center\", value: \"center\" },\r\n            { displayName: \"Right\", value: \"right\" }\r\n        ],\r\n        value: { value: \"center\", displayName: \"center\" } // Default to center alignment\r\n    });\r\n\r\n    name: string = \"columnHeaderFormat\";\r\n    displayName: string = \"Column Headers\";\r\n    slices: Array<FormattingSettingsSlice> = [this.backgroundColor, this.fontColor, this.bold, this.alignment];\r\n}\r\n\r\n/**\r\n * Row Header Formatting Card\r\n */\r\nclass RowHeaderFormatSettings extends FormattingSettingsCard {\r\n    backgroundColor = new formattingSettings.ColorPicker({\r\n        name: \"backgroundColor\",\r\n        displayName: \"Background Color\",\r\n        value: { value: \"#E8E8E8\" },\r\n        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\r\n    });\r\n\r\n    fontColor = new formattingSettings.ColorPicker({\r\n        name: \"fontColor\",\r\n        displayName: \"Font Color\",\r\n        value: { value: \"#000000\" },\r\n        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\r\n    });\r\n    \r\n    bold = new formattingSettings.ToggleSwitch({\r\n        name: \"bold\",\r\n        displayName: \"Bold\",\r\n        value: true\r\n    });\r\n\r\n    alignment = new formattingSettings.ItemDropdown({\r\n        name: \"alignment\",\r\n        displayName: \"Text Alignment\",\r\n        items: [\r\n            { displayName: \"Left\", value: \"left\" },\r\n            { displayName: \"Center\", value: \"center\" },\r\n            { displayName: \"Right\", value: \"right\" }\r\n        ],\r\n        value: { value: \"left\", displayName: \"left\"} // Default to center alignment\r\n    });\r\n\r\n    name: string = \"rowHeaderFormat\";\r\n    displayName: string = \"Row Headers\";\r\n    slices: Array<FormattingSettingsSlice> = [this.backgroundColor, this.fontColor, this.bold, this.alignment];\r\n}\r\n\r\n/**\r\n * Subtotal Formatting Card\r\n */\r\nclass SubtotalFormatSettings extends FormattingSettingsCard {\r\n    backgroundColor = new formattingSettings.ColorPicker({\r\n        name: \"backgroundColor\",\r\n        displayName: \"Background Color\",\r\n        value: { value: \"#F0F0F0\" },\r\n        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\r\n    });\r\n\r\n    fontColor = new formattingSettings.ColorPicker({\r\n        name: \"fontColor\",\r\n        displayName: \"Font Color\",\r\n        value: { value: \"#000000\" },\r\n        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\r\n    });\r\n    \r\n    bold = new formattingSettings.ToggleSwitch({\r\n        name: \"bold\",\r\n        displayName: \"Bold\",\r\n        value: true\r\n    });\r\n    \r\n    italic = new formattingSettings.ToggleSwitch({\r\n        name: \"italic\",\r\n        displayName: \"Italic\",\r\n        value: false\r\n    });\r\n\r\n    applyToLevel0 = new formattingSettings.ToggleSwitch({\r\n        name: \"applyToLevel0\",\r\n        displayName: \"Apply to Top Level\",\r\n        value: true\r\n    });\r\n\r\n    name: string = \"subtotalFormat\";\r\n    displayName: string = \"Subtotals\";\r\n    slices: Array<FormattingSettingsSlice> = [\r\n        this.backgroundColor, \r\n        this.fontColor, \r\n        this.bold, \r\n        this.italic,\r\n        this.applyToLevel0\r\n    ];\r\n}\r\n\r\n/**\r\n * Blank Rows Settings Card\r\n */\r\nclass BlankRowSettings extends FormattingSettingsCard {\r\n    enableBlankRows = new formattingSettings.ToggleSwitch({\r\n        name: \"enableBlankRows\",\r\n        displayName: \"Add Blank Rows\",\r\n        value: false\r\n    });\r\n\r\n    backgroundColor = new formattingSettings.ColorPicker({\r\n        name: \"backgroundColor\",\r\n        displayName: \"Background Color\",\r\n        value: { value: \"#F0F0F0\" },\r\n        instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\r\n    });\r\n\r\n    height = new formattingSettings.NumUpDown({\r\n        name: \"height\",\r\n        displayName: \"Row Height\",\r\n        value: 10\r\n    });\r\n\r\n    name: string = \"blankRowSettings\";\r\n    displayName: string = \"Blank Rows\";\r\n    slices: Array<FormattingSettingsSlice> = [\r\n        this.enableBlankRows,\r\n        this.backgroundColor,\r\n        this.height\r\n    ];\r\n}\r\n\r\n/**\r\n * Visual settings model class\r\n */\r\nexport class VisualFormattingSettingsModel extends FormattingSettingsModel {\r\n    // Create formatting settings model formatting cards\r\n    generalSettings = new GeneralSettings();\r\n    borderSettings = new BorderSettings();\r\n    fontFormatSettings = new FontFormatSettings();\r\n    columnHeaderFormatSettings = new ColumnHeaderFormatSettings();\r\n    rowHeaderFormatSettings = new RowHeaderFormatSettings();\r\n    subtotalFormatSettings = new SubtotalFormatSettings();\r\n    blankRowSettings = new BlankRowSettings();\r\n\r\n    cards = [\r\n        this.generalSettings,\r\n        this.borderSettings,\r\n        this.fontFormatSettings,\r\n        this.columnHeaderFormatSettings,\r\n        this.rowHeaderFormatSettings,\r\n        this.subtotalFormatSettings,\r\n        this.blankRowSettings\r\n    ];\r\n}\r\n","/**\n * Build and return formatting descriptor for simple slice\n *\n * @param objectName Object name from capabilities\n * @param slice formatting simple slice\n * @returns simple slice formatting descriptor\n */\nexport function getDescriptor(objectName, slice) {\n    return {\n        objectName: objectName,\n        propertyName: slice.name,\n        selector: slice.selector,\n        altConstantValueSelector: slice.altConstantSelector,\n        instanceKind: slice.instanceKind\n    };\n}\n/**\n * Get property value from dataview objects if exists\n * Else return the default value from formatting settings object\n *\n * @param value dataview object value\n * @param defaultValue formatting settings default value\n * @returns formatting property value\n */\nexport function getPropertyValue(slice, value, defaultValue) {\n    if (value == null || (typeof value === \"object\" && !value.solid)) {\n        return defaultValue;\n    }\n    if (value.solid) {\n        return { value: value === null || value === void 0 ? void 0 : value.solid.color };\n    }\n    if ((slice === null || slice === void 0 ? void 0 : slice.type) === \"Dropdown\" /* visuals.FormattingComponent.Dropdown */ && slice.items) {\n        const itemsArray = slice.items;\n        return itemsArray.find(item => item.value == value);\n    }\n    return value;\n}\n//# sourceMappingURL=FormattingSettingsUtils.js.map","import { CompositeCard, SimpleCard } from \"./FormattingSettingsComponents\";\nexport class FormattingSettingsService {\n    constructor(localizationManager) {\n        this.localizationManager = localizationManager;\n    }\n    /**\n     * Build visual formatting settings model from metadata dataView\n     *\n     * @param dataViews metadata dataView object\n     * @returns visual formatting settings model\n     */\n    populateFormattingSettingsModel(typeClass, dataView) {\n        var _a, _b;\n        const defaultSettings = new typeClass();\n        const dataViewObjects = (_a = dataView === null || dataView === void 0 ? void 0 : dataView.metadata) === null || _a === void 0 ? void 0 : _a.objects;\n        if (dataViewObjects) {\n            // loop over each formatting property and set its new value if exists\n            (_b = defaultSettings.cards) === null || _b === void 0 ? void 0 : _b.forEach((card) => {\n                var _a;\n                if (card instanceof CompositeCard)\n                    (_a = card.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                const cardGroupInstances = (card instanceof SimpleCard ? [card] : card.groups);\n                cardGroupInstances.forEach((cardGroupInstance) => {\n                    var _a, _b, _c, _d;\n                    // Set current top level toggle value\n                    (_a = cardGroupInstance.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                    (_b = cardGroupInstance === null || cardGroupInstance === void 0 ? void 0 : cardGroupInstance.slices) === null || _b === void 0 ? void 0 : _b.forEach((slice) => {\n                        slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                    });\n                    (_d = (_c = cardGroupInstance === null || cardGroupInstance === void 0 ? void 0 : cardGroupInstance.container) === null || _c === void 0 ? void 0 : _c.containerItems) === null || _d === void 0 ? void 0 : _d.forEach((containerItem) => {\n                        var _a;\n                        (_a = containerItem === null || containerItem === void 0 ? void 0 : containerItem.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                            slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                        });\n                    });\n                });\n            });\n        }\n        return defaultSettings;\n    }\n    /**\n     * Build formatting model by parsing formatting settings model object\n     *\n     * @returns powerbi visual formatting model\n     */\n    buildFormattingModel(formattingSettingsModel) {\n        const formattingModel = {\n            cards: []\n        };\n        formattingSettingsModel.cards\n            .filter(({ visible = true }) => visible)\n            .forEach((card) => {\n            var _a;\n            const formattingCard = {\n                displayName: (this.localizationManager && card.displayNameKey) ? this.localizationManager.getDisplayName(card.displayNameKey) : card.displayName,\n                description: (this.localizationManager && card.descriptionKey) ? this.localizationManager.getDisplayName(card.descriptionKey) : card.description,\n                groups: [],\n                uid: card.name + \"-card\",\n                analyticsPane: card.analyticsPane,\n            };\n            const objectName = card.name;\n            if (card.topLevelSlice) {\n                const topLevelToggleSlice = card.topLevelSlice.getFormattingSlice(objectName, this.localizationManager);\n                topLevelToggleSlice.suppressDisplayName = true;\n                formattingCard.topLevelToggle = topLevelToggleSlice;\n            }\n            (_a = card.onPreProcess) === null || _a === void 0 ? void 0 : _a.call(card);\n            const isSimpleCard = card instanceof SimpleCard;\n            const cardGroupInstances = (isSimpleCard ?\n                [card].filter(({ visible = true }) => visible) :\n                card.groups.filter(({ visible = true }) => visible));\n            cardGroupInstances\n                .forEach((cardGroupInstance) => {\n                const groupUid = cardGroupInstance.name + \"-group\";\n                // Build formatting group for each group\n                const formattingGroup = {\n                    displayName: isSimpleCard ? undefined : (this.localizationManager && cardGroupInstance.displayNameKey)\n                        ? this.localizationManager.getDisplayName(cardGroupInstance.displayNameKey) : cardGroupInstance.displayName,\n                    description: isSimpleCard ? undefined : (this.localizationManager && cardGroupInstance.descriptionKey)\n                        ? this.localizationManager.getDisplayName(cardGroupInstance.descriptionKey) : cardGroupInstance.description,\n                    slices: [],\n                    uid: groupUid,\n                    collapsible: cardGroupInstance.collapsible,\n                    delaySaveSlices: cardGroupInstance.delaySaveSlices,\n                    disabled: cardGroupInstance.disabled,\n                    disabledReason: cardGroupInstance.disabledReason,\n                };\n                formattingCard.groups.push(formattingGroup);\n                // In case formatting model adds data points or top categories (Like when you modify specific visual category color).\n                // these categories use same object name and property name from capabilities and the generated uid will be the same for these formatting categories properties\n                // Solution => Save slice names to modify each slice uid to be unique by adding counter value to the new slice uid\n                const sliceNames = {};\n                // Build formatting container slice for each property\n                if (cardGroupInstance.container) {\n                    const container = cardGroupInstance.container;\n                    const containerUid = groupUid + \"-container\";\n                    const formattingContainer = {\n                        displayName: (this.localizationManager && container.displayNameKey)\n                            ? this.localizationManager.getDisplayName(container.displayNameKey) : container.displayName,\n                        description: (this.localizationManager && container.descriptionKey)\n                            ? this.localizationManager.getDisplayName(container.descriptionKey) : container.description,\n                        containerItems: [],\n                        uid: containerUid\n                    };\n                    container.containerItems.forEach((containerItem) => {\n                        // Build formatting container item object\n                        const containerIemName = containerItem.displayNameKey ? containerItem.displayNameKey : containerItem.displayName;\n                        const containerItemUid = containerUid + containerIemName;\n                        const formattingContainerItem = {\n                            displayName: (this.localizationManager && containerItem.displayNameKey)\n                                ? this.localizationManager.getDisplayName(containerItem.displayNameKey) : containerItem.displayName,\n                            slices: [],\n                            uid: containerItemUid\n                        };\n                        // Build formatting slices and add them to current formatting container item\n                        this.buildFormattingSlices({ slices: containerItem.slices, objectName, sliceNames, formattingSlices: formattingContainerItem.slices });\n                        formattingContainer.containerItems.push(formattingContainerItem);\n                    });\n                    formattingGroup.container = formattingContainer;\n                }\n                if (cardGroupInstance.slices) {\n                    if (cardGroupInstance.topLevelSlice) {\n                        const topLevelToggleSlice = cardGroupInstance.topLevelSlice.getFormattingSlice(objectName, this.localizationManager);\n                        topLevelToggleSlice.suppressDisplayName = true;\n                        (formattingGroup.displayName == undefined ? formattingCard : formattingGroup).topLevelToggle = topLevelToggleSlice;\n                    }\n                    // Build formatting slice for each property\n                    this.buildFormattingSlices({ slices: cardGroupInstance.slices, objectName, sliceNames, formattingSlices: formattingGroup.slices });\n                }\n            });\n            formattingCard.revertToDefaultDescriptors = this.getRevertToDefaultDescriptor(card);\n            formattingModel.cards.push(formattingCard);\n        });\n        return formattingModel;\n    }\n    buildFormattingSlices({ slices, objectName, sliceNames, formattingSlices }) {\n        // Filter slices based on their visibility\n        slices === null || slices === void 0 ? void 0 : slices.filter(({ visible = true }) => visible).forEach((slice) => {\n            const formattingSlice = slice === null || slice === void 0 ? void 0 : slice.getFormattingSlice(objectName, this.localizationManager);\n            if (formattingSlice) {\n                // Modify formatting slice uid if needed\n                if (sliceNames[slice.name] === undefined) {\n                    sliceNames[slice.name] = 0;\n                }\n                else {\n                    sliceNames[slice.name]++;\n                    formattingSlice.uid = `${formattingSlice.uid}-${sliceNames[slice.name]}`;\n                }\n                formattingSlices.push(formattingSlice);\n            }\n        });\n    }\n    getRevertToDefaultDescriptor(card) {\n        var _a;\n        // Proceeded slice names are saved to prevent duplicated default descriptors in case of using \n        // formatting categories & selectors, since they have the same descriptor objectName and propertyName\n        const sliceNames = {};\n        const revertToDefaultDescriptors = [];\n        let cardSlicesDefaultDescriptors;\n        let cardContainerSlicesDefaultDescriptors = [];\n        // eslint-disable-next-line\n        if (card instanceof CompositeCard && card.topLevelSlice)\n            revertToDefaultDescriptors.push(...(_a = card.topLevelSlice) === null || _a === void 0 ? void 0 : _a.getRevertToDefaultDescriptor(card.name));\n        const cardGroupInstances = (card instanceof SimpleCard ?\n            [card].filter(({ visible = true }) => visible) :\n            card.groups.filter(({ visible = true }) => visible));\n        cardGroupInstances.forEach((cardGroupInstance) => {\n            var _a, _b;\n            cardSlicesDefaultDescriptors = this.getSlicesRevertToDefaultDescriptor(card.name, cardGroupInstance.slices, sliceNames, cardGroupInstance.topLevelSlice);\n            (_b = (_a = cardGroupInstance.container) === null || _a === void 0 ? void 0 : _a.containerItems) === null || _b === void 0 ? void 0 : _b.forEach((containerItem) => {\n                cardContainerSlicesDefaultDescriptors = cardContainerSlicesDefaultDescriptors.concat(this.getSlicesRevertToDefaultDescriptor(card.name, containerItem.slices, sliceNames));\n            });\n            revertToDefaultDescriptors.push(...cardSlicesDefaultDescriptors.concat(cardContainerSlicesDefaultDescriptors));\n        });\n        return revertToDefaultDescriptors;\n    }\n    getSlicesRevertToDefaultDescriptor(cardName, slices, sliceNames, topLevelSlice) {\n        let revertToDefaultDescriptors = [];\n        if (topLevelSlice) {\n            sliceNames[topLevelSlice.name] = true;\n            revertToDefaultDescriptors = revertToDefaultDescriptors.concat(topLevelSlice.getRevertToDefaultDescriptor(cardName));\n        }\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            if (slice && !sliceNames[slice.name]) {\n                sliceNames[slice.name] = true;\n                revertToDefaultDescriptors = revertToDefaultDescriptors.concat(slice.getRevertToDefaultDescriptor(cardName));\n            }\n        });\n        return revertToDefaultDescriptors;\n    }\n}\nexport default FormattingSettingsService;\n//# sourceMappingURL=FormattingSettingsService.js.map","import * as formattingSettings from \"./FormattingSettingsComponents\";\nimport FormattingSettingsService from \"./FormattingSettingsService\";\nexport { formattingSettings, FormattingSettingsService };\n//# sourceMappingURL=index.js.map","/**\n * Powerbi utils components classes for custom visual formatting pane objects\n *\n */\nimport * as FormattingSettingsParser from \"./utils/FormattingSettingsUtils\";\nclass NamedEntity {\n}\nexport class CardGroupEntity extends NamedEntity {\n}\nexport class Model {\n}\n/** CompositeCard is use to populate a card into the formatting pane with multiple groups */\nexport class CompositeCard extends NamedEntity {\n}\nexport class Group extends CardGroupEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n}\n/** SimpleCard is use to populate a card into the formatting pane in a single group */\nexport class SimpleCard extends CardGroupEntity {\n}\nexport class SimpleSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const sliceDisplayName = (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName;\n        const sliceDescription = (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description;\n        const componentDisplayName = {\n            displayName: sliceDisplayName,\n            description: sliceDescription,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName, localizationManager)\n            } });\n    }\n    // eslint-disable-next-line\n    getFormattingComponent(objectName, localizationManager) {\n        return {\n            descriptor: FormattingSettingsParser.getDescriptor(objectName, this),\n            value: this.value,\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return [{\n                objectName: objectName,\n                propertyName: this.name\n            }];\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a;\n        const newValue = (_a = dataViewObjects === null || dataViewObjects === void 0 ? void 0 : dataViewObjects[objectName]) === null || _a === void 0 ? void 0 : _a[this.name];\n        this.value = FormattingSettingsParser.getPropertyValue(this, newValue, this.value);\n    }\n}\nexport class AlignmentGroup extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"AlignmentGroup\" /* visuals.FormattingComponent.AlignmentGroup */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mode: this.mode, supportsNoSelection: this.supportsNoSelection });\n    }\n}\nexport class ToggleSwitch extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ToggleSwitch\" /* visuals.FormattingComponent.ToggleSwitch */;\n    }\n}\nexport class ColorPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ColorPicker\" /* visuals.FormattingComponent.ColorPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { defaultColor: this.defaultColor, isNoFillItemSupported: this.isNoFillItemSupported });\n    }\n}\nexport class NumUpDown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"NumUpDown\" /* visuals.FormattingComponent.NumUpDown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { options: this.options });\n    }\n}\nexport class Slider extends NumUpDown {\n    constructor() {\n        super(...arguments);\n        this.type = \"Slider\" /* visuals.FormattingComponent.Slider */;\n    }\n}\nexport class DatePicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DatePicker\" /* visuals.FormattingComponent.DatePicker */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: (localizationManager && this.placeholderKey) ? localizationManager.getDisplayName(this.placeholderKey) : this.placeholder, validators: this.validators });\n    }\n}\nexport class ItemDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mergeValues: this.mergeValues, filterValues: this.filterValues });\n    }\n}\nexport class DurationPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DurationPicker\" /* visuals.FormattingComponent.DurationPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class ErrorRangeControl extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ErrorRangeControl\" /* visuals.FormattingComponent.ErrorRangeControl */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class FieldPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FieldPicker\" /* visuals.FormattingComponent.FieldPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators, allowMultipleValues: this.allowMultipleValues });\n    }\n}\nexport class ItemFlagsSelection extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoFlagsSelection extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n}\nexport class TextInput extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"TextInput\" /* visuals.FormattingComponent.TextInput */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: this.placeholder });\n    }\n}\nexport class TextArea extends TextInput {\n    constructor() {\n        super(...arguments);\n        this.type = \"TextArea\" /* visuals.FormattingComponent.TextArea */;\n    }\n}\nexport class FontPicker extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FontPicker\" /* visuals.FormattingComponent.FontPicker */;\n    }\n}\nexport class GradientBar extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"GradientBar\" /* visuals.FormattingComponent.GradientBar */;\n    }\n}\nexport class ImageUpload extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ImageUpload\" /* visuals.FormattingComponent.ImageUpload */;\n    }\n}\nexport class ListEditor extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ListEditor\" /* visuals.FormattingComponent.ListEditor */;\n    }\n}\nexport class ReadOnlyText extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ReadOnlyText\" /* visuals.FormattingComponent.ReadOnlyText */;\n    }\n}\nexport class ShapeMapSelector extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ShapeMapSelector\" /* visuals.FormattingComponent.ShapeMapSelector */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { isAzMapReferenceSelector: this.isAzMapReferenceSelector });\n    }\n}\nexport class CompositeSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const componentDisplayName = {\n            displayName: (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName,\n            description: (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName)\n            } });\n    }\n}\nexport class FontControl extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FontControl\" /* visuals.FormattingComponent.FontControl */;\n    }\n    getFormattingComponent(objectName) {\n        var _a, _b, _c;\n        return {\n            fontFamily: this.fontFamily.getFormattingComponent(objectName),\n            fontSize: this.fontSize.getFormattingComponent(objectName),\n            bold: (_a = this.bold) === null || _a === void 0 ? void 0 : _a.getFormattingComponent(objectName),\n            italic: (_b = this.italic) === null || _b === void 0 ? void 0 : _b.getFormattingComponent(objectName),\n            underline: (_c = this.underline) === null || _c === void 0 ? void 0 : _c.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.fontFamily.getRevertToDefaultDescriptor(objectName)\n            .concat(this.fontSize.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bold ? this.bold.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.italic ? this.italic.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.underline ? this.underline.getRevertToDefaultDescriptor(objectName) : []);\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a, _b, _c;\n        this.fontFamily.setPropertiesValues(dataViewObjects, objectName);\n        this.fontSize.setPropertiesValues(dataViewObjects, objectName);\n        (_a = this.bold) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, objectName);\n        (_b = this.italic) === null || _b === void 0 ? void 0 : _b.setPropertiesValues(dataViewObjects, objectName);\n        (_c = this.underline) === null || _c === void 0 ? void 0 : _c.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class MarginPadding extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"MarginPadding\" /* visuals.FormattingComponent.MarginPadding */;\n    }\n    getFormattingComponent(objectName) {\n        return {\n            left: this.left.getFormattingComponent(objectName),\n            right: this.right.getFormattingComponent(objectName),\n            top: this.top.getFormattingComponent(objectName),\n            bottom: this.bottom.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.left.getRevertToDefaultDescriptor(objectName)\n            .concat(this.right.getRevertToDefaultDescriptor(objectName))\n            .concat(this.top.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bottom.getRevertToDefaultDescriptor(objectName));\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        this.left.setPropertiesValues(dataViewObjects, objectName);\n        this.right.setPropertiesValues(dataViewObjects, objectName);\n        this.top.setPropertiesValues(dataViewObjects, objectName);\n        this.bottom.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class Container extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n}\nexport class ContainerItem extends NamedEntity {\n}\n//# sourceMappingURL=FormattingSettingsComponents.js.map","/*\r\n *  Power BI Visual CLI\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n */\r\n\"use strict\";\r\n\r\nimport powerbi from \"powerbi-visuals-api\";\r\nimport { FormattingSettingsService } from \"powerbi-visuals-utils-formattingmodel\";\r\nimport \"./../style/visual.less\";\r\n\r\nimport VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;\r\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\r\nimport IVisual = powerbi.extensibility.visual.IVisual;\r\nimport DataView = powerbi.DataView;\r\nimport VisualEnumerationInstanceKinds = powerbi.VisualEnumerationInstanceKinds;\r\n\r\nimport { VisualFormattingSettingsModel } from \"./settings\";\r\n\r\nexport class Visual implements IVisual {\r\n    private target: HTMLElement;\r\n    private tableDiv: HTMLDivElement;\r\n    private updateCount: number;\r\n    private formattingSettings: VisualFormattingSettingsModel;\r\n    private formattingSettingsService: FormattingSettingsService;\r\n    // Store the host reference\r\n    private host: powerbi.extensibility.visual.IVisualHost;\r\n    // Track expanded state\r\n    private expandedRows: Map<string, boolean>;\r\n    // Store the last options for re-rendering\r\n    private lastOptions: VisualUpdateOptions;\r\n\r\n    constructor(options: VisualConstructorOptions) {\r\n        this.target = options.element;\r\n        this.host = options.host;\r\n        this.formattingSettingsService = new FormattingSettingsService();\r\n        this.updateCount = 0;\r\n        this.expandedRows = new Map<string, boolean>();\r\n    \r\n        // Create main container div\r\n        const container = document.createElement(\"div\");\r\n        container.className = \"visual-container\";\r\n        container.style.overflow = \"hidden\"; // Changed from auto to hidden\r\n        this.target.appendChild(container);\r\n        \r\n        // Create table container\r\n        this.tableDiv = document.createElement(\"div\");\r\n        this.tableDiv.className = \"table-container\";\r\n        this.tableDiv.style.overflow = \"auto\"; // Keep auto here\r\n        this.tableDiv.style.position = \"relative\"; // Add this\r\n        container.appendChild(this.tableDiv);\r\n    }\r\n\r\n    public update(options: VisualUpdateOptions): void {\r\n        // Store the complete options object for later re-renders\r\n        this.lastOptions = options;\r\n        \r\n        // Clear any previous content\r\n        this.tableDiv.innerHTML = \"\";\r\n        \r\n        // Get formatting settings\r\n        if (options && options.dataViews && options.dataViews[0]) {\r\n            this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(\r\n                VisualFormattingSettingsModel,\r\n                options.dataViews[0]\r\n            );\r\n        } else {\r\n            return; // No data to display\r\n        }\r\n        \r\n        try {\r\n            // Check if we have data\r\n            if (!options || !options.dataViews || !options.dataViews[0]) {\r\n                return;\r\n            }\r\n            \r\n            const dataView = options.dataViews[0];\r\n            \r\n            // Check if we have matrix data\r\n            if (!dataView.matrix) {\r\n                return;\r\n            }\r\n            \r\n            const matrix = dataView.matrix;\r\n            \r\n            // Get measure name\r\n            const measureName = this.getMeasureName(dataView);\r\n            \r\n            // Create matrix table\r\n            this.createMatrixTable(matrix, measureName);\r\n            \r\n        } catch (error) {\r\n            console.error(\"Error in update:\", error);\r\n        }\r\n    }\r\n    \r\n    private getMeasureName(dataView: DataView): string {\r\n        // Try to get from matrix valueSources\r\n        if (dataView.matrix && dataView.matrix.valueSources && dataView.matrix.valueSources.length > 0) {\r\n            const valueSource = dataView.matrix.valueSources[0];\r\n            if (valueSource.displayName) {\r\n                return valueSource.displayName;\r\n            }\r\n        }\r\n        \r\n        // Try to get from metadata columns with 'values' role\r\n        if (dataView.metadata && dataView.metadata.columns) {\r\n            const valueColumn = dataView.metadata.columns.find(col => \r\n                col.roles && (col.roles.values || col.roles.value || col.roles.measures || col.roles.measure));\r\n                \r\n            if (valueColumn && valueColumn.displayName) {\r\n                return valueColumn.displayName;\r\n            }\r\n        }\r\n        \r\n        // Default fallback\r\n        return \"Amount\";\r\n    }\r\n    \r\n    // Generate a unique ID for tracking expanded state\r\n    private getNodeId(node: any, level: number): string {\r\n        const value = node.value !== null && node.value !== undefined ? String(node.value) : \"null\";\r\n        return `level_${level}_${value}`;\r\n    }\r\n    \r\n    // Check if a node is expanded\r\n    private isExpanded(nodeId: string): boolean {\r\n        return this.expandedRows.get(nodeId) === true;\r\n    }\r\n    \r\n    // Toggle expanded state of a node\r\n    private toggleExpanded(nodeId: string): void {\r\n        this.expandedRows.set(nodeId, !this.isExpanded(nodeId));\r\n    }\r\n    \r\n    // Format a date value according to the format string\r\n    private formatDateValue(value: any, format: string = \"M/d/yyyy\"): string {\r\n        if (!value) return \"\";\r\n        \r\n        try {\r\n            // Handle date objects stored in an object with epochTimeStamp\r\n            if (typeof value === 'object' && value.epochTimeStamp) {\r\n                const date = new Date(value.epochTimeStamp);\r\n                \r\n                // Default simple format if no format specified\r\n                if (!format || format === \"d\") {\r\n                    return date.toLocaleDateString();\r\n                }\r\n                \r\n                // Extract date components\r\n                const month = date.getMonth() + 1;\r\n                const day = date.getDate();\r\n                const year = date.getFullYear();\r\n                \r\n                // Replace format tokens with actual values\r\n                let formattedDate = format;\r\n                formattedDate = formattedDate.replace(/M+/g, month.toString().padStart(2, '0'));\r\n                formattedDate = formattedDate.replace(/d+/g, day.toString().padStart(2, '0'));\r\n                formattedDate = formattedDate.replace(/yyyy/g, year.toString());\r\n                formattedDate = formattedDate.replace(/yy/g, year.toString().slice(-2));\r\n                \r\n                return formattedDate;\r\n            }\r\n            \r\n            // Handle native Date objects\r\n            if (value instanceof Date) {\r\n                return value.toLocaleDateString();\r\n            }\r\n            \r\n            return String(value);\r\n        } catch (error) {\r\n            console.error(\"Error formatting date:\", error);\r\n            return String(value);\r\n        }\r\n    }\r\n    \r\n    // Calculate subtotals for a parent node for a specific column index\r\n    private calculateSubtotalForColumn(parentNode: any, columnIndex: number): number {\r\n        if (!parentNode || !parentNode.children || parentNode.children.length === 0) {\r\n            return 0;\r\n        }\r\n        \r\n        let total = 0;\r\n        \r\n        for (const child of parentNode.children) {\r\n            // Access the value for the specific column\r\n            if (child.values && child.values[columnIndex] && \r\n                child.values[columnIndex].value !== null && \r\n                child.values[columnIndex].value !== undefined &&\r\n                typeof child.values[columnIndex].value === 'number') {\r\n                total += child.values[columnIndex].value;\r\n            }\r\n        }\r\n        \r\n        return total;\r\n    }\r\n    \r\n    // Apply global border settings to all cells\r\n    private applyGlobalBorders(table: HTMLTableElement): void {\r\n        const borderSettings = this.formattingSettings.borderSettings;\r\n        \r\n        if (!borderSettings || !borderSettings.show.value) {\r\n            // If borders are turned off, remove all borders\r\n            table.classList.remove('with-borders');\r\n            table.classList.remove('with-horizontal-borders');\r\n            table.classList.remove('with-vertical-borders');\r\n            return;\r\n        }\r\n        \r\n        // Get border color and width\r\n        const borderColor = borderSettings.color.value.value;\r\n        const borderWidth = borderSettings.width.value;\r\n        const showHorizontal = borderSettings.horizontalBorders.value;\r\n        const showVertical = borderSettings.verticalBorders.value;\r\n        \r\n        // Set base border style\r\n        const borderStyle = `${borderWidth}px solid ${borderColor}`;\r\n        \r\n        // Add classes based on which borders are enabled\r\n        table.classList.add('with-borders');\r\n        \r\n        if (showHorizontal) {\r\n            table.classList.add('with-horizontal-borders');\r\n        } else {\r\n            table.classList.remove('with-horizontal-borders');\r\n        }\r\n        \r\n        if (showVertical) {\r\n            table.classList.add('with-vertical-borders');\r\n        } else {\r\n            table.classList.remove('with-vertical-borders');\r\n        }\r\n        \r\n        // Set CSS variables for border styling\r\n        table.style.setProperty('--border-color', borderColor);\r\n        table.style.setProperty('--border-width', `${borderWidth}px`);\r\n        table.style.setProperty('--border-style', 'solid');\r\n    }\r\n    \r\n    private createMatrixTable(matrix: powerbi.DataViewMatrix, measureName: string): void {\r\n        // Create table\r\n        const table = document.createElement(\"table\");\r\n        table.className = \"matrix-table\";\r\n        \r\n        // Set hover effects based on settings\r\n        if (this.formattingSettings.generalSettings.enableHover.value) {\r\n            table.classList.add(\"hover-enabled\");\r\n        }\r\n        \r\n        this.tableDiv.appendChild(table);\r\n        \r\n        // Check if we have rows\r\n        if (!matrix.rows || !matrix.rows.root) {\r\n            return;\r\n        }\r\n        \r\n        let columns: any[] = [];\r\n        let columnFormats: string[] = [];\r\n        \r\n        if (matrix.columns && matrix.columns.root && matrix.columns.root.children) {\r\n            columns = matrix.columns.root.children;\r\n            \r\n            // Extract column formats if columns are dates\r\n            if (matrix.columns.levels && matrix.columns.levels.length > 0 && \r\n                matrix.columns.levels[0].sources && matrix.columns.levels[0].sources.length > 0) {\r\n                const columnSource = matrix.columns.levels[0].sources[0];\r\n                if (columnSource.format) {\r\n                    // Use the same format for all columns if they come from the same source\r\n                    columnFormats = columns.map(() => columnSource.format);\r\n                }\r\n            }\r\n        } else {\r\n            // If no columns, create a single column for the measure\r\n            columns = [{ value: null }]; // Empty column header\r\n            columnFormats = [\"\"];\r\n        }\r\n        \r\n        // Get column width setting\r\n        const columnWidth = this.formattingSettings.generalSettings.columnWidth.value;\r\n        \r\n        // Create header row\r\n        const thead = document.createElement(\"thead\");\r\n        const headerRow = document.createElement(\"tr\");\r\n        \r\n        // Add corner cell with direct inline styling for maximum specificity\r\n        const cornerCell = document.createElement(\"th\");\r\n        cornerCell.className = \"row-header column-header\"; // Add both classes for CSS\r\n        cornerCell.setAttribute(\"style\", \r\n            \"position: sticky !important; \" + \r\n            \"top: 0 !important; \" + \r\n            \"left: 0 !important; \" + \r\n            \"z-index: 1000 !important; \" + \r\n            \"background-color: #e0e0e0;\"\r\n        );\r\n\r\n        // Apply column header formatting to corner cell\r\n        this.applyColumnHeaderFormatting(cornerCell);\r\n        headerRow.appendChild(cornerCell);\r\n        \r\n        // Add column headers\r\n        for (let i = 0; i < columns.length; i++) {\r\n            const th = document.createElement(\"th\");\r\n            th.className = \"column-header\";\r\n            \r\n            // Apply column width\r\n            if (columnWidth) {\r\n                th.style.minWidth = `${columnWidth}px`;\r\n                th.style.width = `${columnWidth}px`;\r\n            }\r\n            \r\n            // Apply column header formatting\r\n            this.applyColumnHeaderFormatting(th);\r\n            \r\n            // Set header text\r\n            const column = columns[i];\r\n            if (column.value !== null && column.value !== undefined) {\r\n                // Format date headers properly\r\n                if (column.isDate || (typeof column.value === 'object' && column.value.epochTimeStamp)) {\r\n                    th.textContent = this.formatDateValue(column.value, columnFormats[i] || \"d\");\r\n                } else {\r\n                    th.textContent = String(column.value);\r\n                }\r\n            } else if (this.formattingSettings.generalSettings.showMeasureName.value) {\r\n                // Use measure name if column is empty and showMeasureName is true\r\n                th.textContent = measureName;\r\n            } else {\r\n                th.textContent = \"\";\r\n            }\r\n            \r\n            headerRow.appendChild(th);\r\n        }\r\n        \r\n        thead.appendChild(headerRow);\r\n        table.appendChild(thead);\r\n        \r\n        // Create table body\r\n        const tbody = document.createElement(\"tbody\");\r\n        table.appendChild(tbody);\r\n        \r\n        // Initialize all new rows to expanded state if not already set\r\n        if (matrix.rows.root.children) {\r\n            this.initializeExpandedState(matrix.rows.root.children, 0, \"\");\r\n        }\r\n        \r\n        // Render rows recursively with subtotals\r\n        if (matrix.rows.root.children) {\r\n            this.renderRowsWithSubtotals(table, matrix.rows.root.children, columns, 0, \"\");\r\n        }\r\n        \r\n        // Apply formatting\r\n        this.applyFormatting(table);\r\n        \r\n        // Apply global border settings\r\n        this.applyGlobalBorders(table);\r\n    }\r\n    \r\n    // Initialize expanded state for new nodes\r\n    private initializeExpandedState(rows: any[], level: number, parentId: string): void {\r\n        if (!rows) return;\r\n        \r\n        for (let i = 0; i < rows.length; i++) {\r\n            const row = rows[i];\r\n            const nodeId = parentId + this.getNodeId(row, level);\r\n            \r\n            // Set to expanded if not already set (default to expanded)\r\n            if (!this.expandedRows.has(nodeId)) {\r\n                this.expandedRows.set(nodeId, true); // Default to expanded\r\n            }\r\n            \r\n            // Initialize children recursively\r\n            if (row.children && row.children.length > 0) {\r\n                this.initializeExpandedState(row.children, level + 1, nodeId);\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Recursive function to render rows with subtotals\r\n    private renderRowsWithSubtotals(\r\n        table: HTMLTableElement, \r\n        rows: any[], \r\n        columns: any[], \r\n        level: number = 0, \r\n        parentId: string = \"\"\r\n    ): void {\r\n        if (!rows || rows.length === 0) return;\r\n        \r\n        const tbody = table.querySelector('tbody') as HTMLTableSectionElement;\r\n        const columnWidth = this.formattingSettings.generalSettings.columnWidth.value;\r\n        const applySubtotalToLevel0 = this.formattingSettings.subtotalFormatSettings.applyToLevel0.value;\r\n        \r\n        for (let i = 0; i < rows.length; i++) {\r\n            const row = rows[i];\r\n            const nodeId = parentId + this.getNodeId(row, level);\r\n            const isExpanded = this.isExpanded(nodeId);\r\n            const isLevel0 = level === 0;\r\n            \r\n            // Create row\r\n            const tr = document.createElement(\"tr\");\r\n            tr.setAttribute(\"data-node-id\", nodeId);\r\n            tr.setAttribute(\"data-level\", String(level));\r\n            \r\n            if (isLevel0) {\r\n                tr.classList.add(\"level-0-row\");\r\n            }\r\n            \r\n            // Add row header with appropriate indentation\r\n            const rowHeader = document.createElement(\"th\");\r\n            rowHeader.className = \"row-header\";\r\n            \r\n            if (isLevel0) {\r\n                rowHeader.classList.add(\"level-0-header\");\r\n            }\r\n            \r\n            // Apply row header width\r\n            const rowHeaderWidth = this.formattingSettings.generalSettings.rowHeaderWidth.value;\r\n            if (rowHeaderWidth) {\r\n                rowHeader.style.minWidth = `${rowHeaderWidth}px`;\r\n                rowHeader.style.width = `${rowHeaderWidth}px`;\r\n            }\r\n            // Create header content with indentation and toggle if needed\r\n            const headerContent = document.createElement(\"div\");\r\n            headerContent.className = \"row-header-content\";\r\n            headerContent.style.marginLeft = `${level * 20}px`;\r\n            headerContent.style.display = \"flex\"; // Add flex display\r\n            headerContent.style.alignItems = \"center\"; // Center items vertically\r\n\r\n            // Add toggle button if has children\r\n            if (row.children && row.children.length > 0) {\r\n                const toggleButton = document.createElement(\"span\");\r\n                toggleButton.className = \"toggle-button\";\r\n                toggleButton.textContent = isExpanded ? \"▼\" : \"►\";\r\n                toggleButton.style.flexShrink = \"0\"; // Prevent toggle from shrinking\r\n                toggleButton.onclick = (event) => {\r\n                    event.stopPropagation();\r\n                    // Toggle the expanded state\r\n                    this.toggleExpanded(nodeId);\r\n                    // Use our improved rendering method\r\n                    this.renderVisualWithCurrentState();\r\n                };\r\n                headerContent.appendChild(toggleButton);\r\n            } else {\r\n                // Add a spacer for better alignment\r\n                const spacer = document.createElement(\"span\");\r\n                spacer.className = \"toggle-spacer\";\r\n                spacer.textContent = \"  \";\r\n                spacer.style.flexShrink = \"0\"; // Prevent spacer from shrinking\r\n                headerContent.appendChild(spacer);\r\n            }\r\n            \r\n            // Add the actual row label in a separate span for alignment control\r\n            const label = document.createElement(\"span\");\r\n            label.className = \"row-label\";\r\n            label.style.width = \"100%\"; // Allow label to take remaining space\r\n\r\n            // Format date row headers properly\r\n            if (row.isDate || (typeof row.value === 'object' && row.value.epochTimeStamp)) {\r\n                label.textContent = this.formatDateValue(row.value);\r\n            } else {\r\n                label.textContent = row.value !== null && row.value !== undefined ? String(row.value) : \"\";\r\n            }\r\n\r\n            // Apply alignment to the label based on row header format settings\r\n            if (this.formattingSettings.rowHeaderFormatSettings.alignment && \r\n                this.formattingSettings.rowHeaderFormatSettings.alignment.value) {\r\n                label.style.textAlign = String(this.formattingSettings.rowHeaderFormatSettings.alignment.value.value);\r\n                label.style.display = \"block\"; // Ensure block display for text-align to work\r\n            }\r\n\r\n            headerContent.appendChild(label);\r\n            rowHeader.appendChild(headerContent);\r\n            \r\n            // Apply row header formatting - different for Level 0 if setting enabled\r\n            if (isLevel0 && applySubtotalToLevel0) {\r\n                this.applyLevel0HeaderFormatting(rowHeader);\r\n            } else {\r\n                this.applyRowHeaderFormatting(rowHeader);\r\n            }\r\n            \r\n            tr.appendChild(rowHeader);\r\n            \r\n            // Add data cells \r\n            if (row.children && row.children.length > 0) {\r\n                // Calculate and display subtotals for each column\r\n                for (let j = 0; j < columns.length; j++) {\r\n                    const td = document.createElement(\"td\");\r\n                    td.className = \"data-cell subtotal-cell\";\r\n                    \r\n                    if (isLevel0) {\r\n                        td.classList.add(\"level-0-subtotal\");\r\n                    }\r\n                    \r\n                    // Apply column width to cells\r\n                    if (columnWidth) {\r\n                        td.style.minWidth = `${columnWidth}px`;\r\n                        td.style.width = `${columnWidth}px`;\r\n                    }\r\n                    \r\n                    // Calculate subtotal for this specific column\r\n                    const subtotal = this.calculateSubtotalForColumn(row, j);\r\n                    \r\n                    // Only display the subtotal if it's not zero\r\n                    if (subtotal !== 0) {\r\n                        td.textContent = this.formatNumber(subtotal);\r\n                    } else {\r\n                        td.textContent = \"\";\r\n                    }\r\n                    \r\n                    // Apply the same alignment as regular data cells\r\n                    if (this.formattingSettings.fontFormatSettings.dataAlignment && \r\n                        this.formattingSettings.fontFormatSettings.dataAlignment.value) {\r\n                        td.style.textAlign = String(this.formattingSettings.fontFormatSettings.dataAlignment.value.value);\r\n                    }\r\n                    \r\n                    tr.appendChild(td);\r\n                }\r\n            } else if (row.values) {\r\n                // Regular data cells\r\n                for (let j = 0; j < columns.length; j++) {\r\n                    const td = document.createElement(\"td\");\r\n                    td.className = \"data-cell\";\r\n                    \r\n                    // Apply column width to cells\r\n                    if (columnWidth) {\r\n                        td.style.minWidth = `${columnWidth}px`;\r\n                        td.style.width = `${columnWidth}px`;\r\n                    }\r\n                    \r\n                    // Get cell value\r\n                    const value = row.values[j];\r\n                    \r\n                    if (value !== null && value !== undefined) {\r\n                        if (typeof value === 'number') {\r\n                            td.textContent = this.formatNumber(value);\r\n                        } else if (typeof value === 'object') {\r\n                            // Extract value from object\r\n                            if ('value' in value) {\r\n                                const cellValue = value.value;\r\n                                if (typeof cellValue === 'number') {\r\n                                    td.textContent = this.formatNumber(cellValue);\r\n                                } else if (cellValue === null || cellValue === undefined || \r\n                                          (typeof cellValue === 'object' && Object.keys(cellValue).length === 0)) {\r\n                                    // Handle empty objects\r\n                                    td.textContent = \"\";\r\n                                } else {\r\n                                    td.textContent = String(cellValue);\r\n                                }\r\n                            } else if (Object.keys(value).length === 0) {\r\n                                // Handle empty objects\r\n                                td.textContent = \"\";\r\n                            } else {\r\n                                td.textContent = JSON.stringify(value);\r\n                            }\r\n                        } else {\r\n                            td.textContent = String(value);\r\n                        }\r\n                    } else {\r\n                        td.textContent = \"\";\r\n                    }\r\n                    \r\n                    tr.appendChild(td);\r\n                }\r\n            }\r\n            \r\n            tbody.appendChild(tr);\r\n            \r\n            // If this node has children and is expanded, render its children\r\n            if (row.children && row.children.length > 0 && isExpanded) {\r\n                this.renderRowsWithSubtotals(table, row.children, columns, level + 1, nodeId);\r\n            }\r\n            \r\n            // If this is the last row at the bottom level, add a blank row if enabled\r\n            if ((!row.children || row.children.length === 0) && \r\n                i === rows.length - 1 && \r\n                this.formattingSettings.blankRowSettings.enableBlankRows.value) {\r\n                \r\n                // Create blank row\r\n                const blankRow = document.createElement(\"tr\");\r\n                blankRow.className = \"blank-row\";\r\n                \r\n                // Set the height if specified\r\n                const rowHeight = this.formattingSettings.blankRowSettings.height.value;\r\n                if (rowHeight > 0) {\r\n                    blankRow.style.height = `${rowHeight}px`;\r\n                }\r\n                \r\n                // Create a cell that spans all columns\r\n                const blankCell = document.createElement(\"td\");\r\n                blankCell.colSpan = columns.length + 1; // +1 for row header column\r\n                \r\n                // Apply background color from settings\r\n                const bgColor = this.formattingSettings.blankRowSettings.backgroundColor.value.value;\r\n                if (bgColor) {\r\n                    blankCell.style.backgroundColor = bgColor;\r\n                }\r\n                \r\n                // Add the cell to the row and the row to the table\r\n                blankRow.appendChild(blankCell);\r\n                tbody.appendChild(blankRow);\r\n            }\r\n        }\r\n    }\r\n    \r\n    private formatNumber(value: number): string {\r\n        return value.toLocaleString(undefined, {\r\n            minimumFractionDigits: 0,\r\n            maximumFractionDigits: 2\r\n        });\r\n    }\r\n    \r\n    private applyColumnHeaderFormatting(headerCell: HTMLTableCellElement): void {\r\n        if (!this.formattingSettings) return;\r\n        \r\n        const headerFormat = this.formattingSettings.columnHeaderFormatSettings;\r\n        \r\n        // Apply background color\r\n        if (headerFormat.backgroundColor.value.value) {\r\n            headerCell.style.backgroundColor = headerFormat.backgroundColor.value.value;\r\n        }\r\n        \r\n        // Apply font color\r\n        if (headerFormat.fontColor.value.value) {\r\n            headerCell.style.color = headerFormat.fontColor.value.value;\r\n        }\r\n        \r\n        // Apply font weight\r\n        if (headerFormat.bold.value) {\r\n            headerCell.style.fontWeight = 'bold';\r\n        } else {\r\n            headerCell.style.fontWeight = 'normal';\r\n        }\r\n\r\n        // Apply text alignment\r\n        if (headerFormat.alignment && headerFormat.alignment.value) {\r\n            headerCell.style.textAlign = String(headerFormat.alignment.value.value);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Apply formatting to row headers\r\n     */\r\n    private applyRowHeaderFormatting(headerCell: HTMLTableCellElement): void {\r\n        if (!this.formattingSettings) return;\r\n        \r\n        const headerFormat = this.formattingSettings.rowHeaderFormatSettings;\r\n        \r\n        // Apply background color\r\n        if (headerFormat.backgroundColor.value.value) {\r\n            headerCell.style.backgroundColor = headerFormat.backgroundColor.value.value;\r\n        }\r\n        \r\n        // Apply font color\r\n        if (headerFormat.fontColor.value.value) {\r\n            headerCell.style.color = headerFormat.fontColor.value.value;\r\n        }\r\n        \r\n        // Apply font weight\r\n        if (headerFormat.bold.value) {\r\n            headerCell.style.fontWeight = 'bold';\r\n        } else {\r\n            headerCell.style.fontWeight = 'normal';\r\n        }\r\n\r\n        // Apply text alignment\r\n        if (headerFormat.alignment && headerFormat.alignment.value) {\r\n            headerCell.style.textAlign = String(headerFormat.alignment.value.value);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Apply subtotal formatting to Level 0 row headers\r\n     */\r\n    private applyLevel0HeaderFormatting(headerCell: HTMLTableCellElement): void {\r\n        if (!this.formattingSettings) return;\r\n        \r\n        const subtotalFormat = this.formattingSettings.subtotalFormatSettings;\r\n        \r\n        // Apply background color\r\n        if (subtotalFormat.backgroundColor.value.value) {\r\n            headerCell.style.backgroundColor = subtotalFormat.backgroundColor.value.value;\r\n        }\r\n        \r\n        // Apply font color\r\n        if (subtotalFormat.fontColor.value.value) {\r\n            headerCell.style.color = subtotalFormat.fontColor.value.value;\r\n        }\r\n        \r\n        // Apply font styling\r\n        if (subtotalFormat.bold.value) {\r\n            headerCell.style.fontWeight = 'bold';\r\n        } else {\r\n            headerCell.style.fontWeight = 'normal';\r\n        }\r\n        \r\n        if (subtotalFormat.italic.value) {\r\n            headerCell.style.fontStyle = 'italic';\r\n        } else {\r\n            headerCell.style.fontStyle = 'normal';\r\n        }\r\n    }\r\n    \r\n    private applyFormatting(table: HTMLTableElement): void {\r\n        if (!this.formattingSettings) {\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            // Get settings\r\n            const general = this.formattingSettings.generalSettings;\r\n            const font = this.formattingSettings.fontFormatSettings;\r\n            const subtotalFormat = this.formattingSettings.subtotalFormatSettings;\r\n            const applySubtotalToLevel0 = subtotalFormat.applyToLevel0.value;\r\n            \r\n            // Apply general font size to table\r\n            table.style.fontSize = `${general.fontSize.value}pt`;\r\n            \r\n            // Apply font family\r\n            if (font.fontFamily.value) {\r\n                table.style.fontFamily = font.fontFamily.value;\r\n            }\r\n            \r\n            // Get all data cells by type\r\n            const regularCells = table.querySelectorAll('td.data-cell:not(.subtotal-cell):not(.level-0-subtotal)');\r\n            const subtotalCells = table.querySelectorAll('td.subtotal-cell:not(.level-0-subtotal)');\r\n            const level0Cells = table.querySelectorAll('td.level-0-subtotal');\r\n            \r\n            // Apply formatting to regular cells\r\n            regularCells.forEach((cell: HTMLTableCellElement) => {\r\n                this.applyDataCellFormatting(cell, font, false, false);\r\n            });\r\n            \r\n            // Apply formatting to subtotal cells with explicit styling\r\n            subtotalCells.forEach((cell: HTMLTableCellElement) => {\r\n                this.applyDataCellFormatting(cell, font, true, false);\r\n            });\r\n            \r\n            // Apply separate formatting to level 0 cells if the setting is enabled\r\n            level0Cells.forEach((cell: HTMLTableCellElement) => {\r\n                if (applySubtotalToLevel0) {\r\n                    this.applySubtotalCellFormatting(cell);\r\n                } else {\r\n                    this.applyDataCellFormatting(cell, font, true, false);\r\n                }\r\n            });\r\n            \r\n        } catch (error) {\r\n            console.error(\"Error applying formatting:\", error);\r\n        }\r\n    }\r\n    \r\n    // Helper function to apply data cell formatting\r\n    private applyDataCellFormatting(\r\n        cell: HTMLTableCellElement, \r\n        font: any, \r\n        isSubtotal: boolean, \r\n        isLevel0: boolean\r\n    ): void {\r\n        // Font color\r\n        if (font.color.value.value) {\r\n            cell.style.color = font.color.value.value;\r\n        }\r\n        \r\n        // Font style\r\n        if (isSubtotal || font.bold.value) {\r\n            cell.style.fontWeight = 'bold';\r\n        }\r\n        \r\n        if (font.italic.value) {\r\n            cell.style.fontStyle = 'italic';\r\n        }\r\n        \r\n        if (font.underline.value) {\r\n            cell.style.textDecoration = 'underline';\r\n        }\r\n        \r\n        // Background color\r\n        if (font.backgroundColor.value.value) {\r\n            if (isSubtotal) {\r\n                // Use a slightly different background for subtotals\r\n                const subtotalBg = this.adjustColor(font.backgroundColor.value.value, -10);\r\n                cell.style.backgroundColor = subtotalBg;\r\n            } else {\r\n                cell.style.backgroundColor = font.backgroundColor.value.value;\r\n            }\r\n        }\r\n\r\n        if (font.dataAlignment && font.dataAlignment.value) {\r\n            cell.style.textAlign = font.dataAlignment.value.value;\r\n        }\r\n    }\r\n    \r\n    // Apply formatting from subtotal settings to level 0 cells\r\n    private applySubtotalCellFormatting(cell: HTMLTableCellElement): void {\r\n        if (!this.formattingSettings) return;\r\n        \r\n        const subtotalFormat = this.formattingSettings.subtotalFormatSettings;\r\n        const fontFormat = this.formattingSettings.fontFormatSettings;\r\n        \r\n        // Font color\r\n        if (subtotalFormat.fontColor.value.value) {\r\n            cell.style.color = subtotalFormat.fontColor.value.value;\r\n        }\r\n        \r\n        // Font style\r\n        if (subtotalFormat.bold.value) {\r\n            cell.style.fontWeight = 'bold';\r\n        }\r\n        \r\n        if (subtotalFormat.italic.value) {\r\n            cell.style.fontStyle = 'italic';\r\n        }\r\n        \r\n        // Background color\r\n        if (subtotalFormat.backgroundColor.value.value) {\r\n            cell.style.backgroundColor = subtotalFormat.backgroundColor.value.value;\r\n        }\r\n        \r\n        // Important: Apply the same text alignment as regular data cells\r\n        if (fontFormat.dataAlignment && fontFormat.dataAlignment.value) {\r\n            cell.style.textAlign = String(fontFormat.dataAlignment.value.value);\r\n        }\r\n    }\r\n    \r\n    // Helper function to adjust color brightness\r\n    private adjustColor(color: string, amount: number): string {\r\n        // Handle empty or invalid colors\r\n        if (!color || color === 'transparent' || color === 'inherit' || color === 'initial') {\r\n            return color;\r\n        }\r\n        \r\n        try {\r\n            // Default to a light gray if we can't parse the color\r\n            let defaultColor = '#f0f0f0';\r\n            \r\n            // Convert hex to RGB\r\n            let hex = color;\r\n            if (hex.startsWith('#')) {\r\n                hex = hex.slice(1);\r\n            }\r\n            \r\n            // If not a proper hex color, return a default slightly darker color\r\n            if (!/^[0-9A-Fa-f]{3}$|^[0-9A-Fa-f]{6}$/.test(hex)) {\r\n                return amount < 0 ? '#e0e0e0' : '#f5f5f5';\r\n            }\r\n            \r\n            // Parse hex to RGB\r\n            let r = parseInt(hex.length === 3 ? hex.slice(0, 1).repeat(2) : hex.slice(0, 2), 16);\r\n            let g = parseInt(hex.length === 3 ? hex.slice(1, 2).repeat(2) : hex.slice(2, 4), 16);\r\n            let b = parseInt(hex.length === 3 ? hex.slice(2, 3).repeat(2) : hex.slice(4, 6), 16);\r\n            \r\n            // Adjust color\r\n            r = Math.max(0, Math.min(255, r + amount));\r\n            g = Math.max(0, Math.min(255, g + amount));\r\n            b = Math.max(0, Math.min(255, b + amount));\r\n            \r\n            // Convert back to hex\r\n            return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n        } catch (error) {\r\n            // Return a default color if there's an error\r\n            console.error(\"Error adjusting color:\", error);\r\n            return amount < 0 ? '#e0e0e0' : '#f5f5f5';\r\n        }\r\n    }\r\n    \r\n    // Helper method for controlled re-rendering of the visual\r\n    private renderVisualWithCurrentState(): void {\r\n        // Use a small timeout to ensure DOM updates\r\n        setTimeout(() => {\r\n            if (this.lastOptions) {\r\n                try {\r\n                    // Store current scroll position to restore after rebuild\r\n                    const scrollTop = this.tableDiv.scrollTop;\r\n                    const scrollLeft = this.tableDiv.scrollLeft;\r\n                    \r\n                    // Clear current content\r\n                    this.tableDiv.innerHTML = \"\";\r\n                    \r\n                    // Check if we have data\r\n                    if (!this.lastOptions || !this.lastOptions.dataViews || !this.lastOptions.dataViews[0]) {\r\n                        return;\r\n                    }\r\n                    \r\n                    const dataView = this.lastOptions.dataViews[0];\r\n                    \r\n                    // Check if we have matrix data\r\n                    if (!dataView.matrix) {\r\n                        return;\r\n                    }\r\n                    \r\n                    const matrix = dataView.matrix;\r\n                    \r\n                    // Get measure name\r\n                    const measureName = this.getMeasureName(dataView);\r\n                    \r\n                    // Rebuild the matrix table\r\n                    this.createMatrixTable(matrix, measureName);\r\n                    \r\n                    // Restore scroll position\r\n                    this.tableDiv.scrollTop = scrollTop;\r\n                    this.tableDiv.scrollLeft = scrollLeft;\r\n                    \r\n                } catch (error) {\r\n                    console.error(\"Error in visual re-render:\", error);\r\n                }\r\n            }\r\n        }, 10); // Small delay to ensure DOM updates first\r\n    }\r\n    \r\n    public getFormattingModel(): powerbi.visuals.FormattingModel {\r\n        return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Visual } from \"../../src/visual\";\nimport powerbiVisualsApi from \"powerbi-visuals-api\";\nimport IVisualPlugin = powerbiVisualsApi.visuals.plugins.IVisualPlugin;\nimport VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;\nimport DialogConstructorOptions = powerbiVisualsApi.extensibility.visual.DialogConstructorOptions;\nvar powerbiKey: any = \"powerbi\";\nvar powerbi: any = window[powerbiKey];\nvar customMatrix3D2AF31BB00A42FC89209A2F7F87EB77_DEBUG: IVisualPlugin = {\n    name: 'customMatrix3D2AF31BB00A42FC89209A2F7F87EB77_DEBUG',\n    displayName: 'CustomMatrix',\n    class: 'Visual',\n    apiVersion: '5.3.0',\n    create: (options?: VisualConstructorOptions) => {\n        if (Visual) {\n            return new Visual(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId: string, options: DialogConstructorOptions, initialState: object) => {\n        const dialogRegistry = (<any>globalThis).dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"customMatrix3D2AF31BB00A42FC89209A2F7F87EB77_DEBUG\"] = customMatrix3D2AF31BB00A42FC89209A2F7F87EB77_DEBUG;\n}\nexport default customMatrix3D2AF31BB00A42FC89209A2F7F87EB77_DEBUG;"],"names":[],"sourceRoot":""}